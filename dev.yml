version: '3.1'
services:
    db:
      container_name: hbi-db
      image: docker.io/library/postgres:16.4
      command: postgres -c wal_level=logical
      restart: always
      environment:
          POSTGRES_PASSWORD: insights
          POSTGRES_USER: insights
          PGUSER: insights
          POSTGRES_DB: insights
      privileged: true
      ports:
          - "5432:5432"
      volumes:
        - ./.unleash/create_unleashdb.sql:/docker-entrypoint-initdb.d/create_unleashdb.sql
        - ./.export-service/create_exportdb.sql:/docker-entrypoint-initdb.d/create_exportdb.sql
        # Create .pg_data dir in your home or another destination for saving the db data between runs.
        # It is being provided to test DB upgrades
        - ~/.pg_data:/var/lib/postgresql/data
      healthcheck:
        test: "pg_isready -h db"
        interval: 2s
        timeout: 5s
        retries: 5

    export-service:
      container_name: export-service
      image: quay.io/cloudservices/export-service
      environment:
        - PGSQL_PORT=5432
        - PGSQL_HOSTNAME=db
        - PGSQL_USER=insights
        - PGSQL_PASSWORD=insights
        - PGSQL_DATABASE=export_service
        - DEBUG=true
        - OPEN_API_FILE_PATH=/var/tmp/openapi.json
        - OPEN_API_PRIVATE_PATH=/var/tmp/private.json
        - KAFKA_BROKERS=kafka:29092
        - AWS_ACCESS_KEY=minio
        - AWS_SECRET_ACCESS_KEY=minioadmin
        - PUBLIC_PORT=8001
        - METRICS_PORT=9090
        - MINIO_PORT=9099
        - MINIO_HOST=minio
        - PRIVATE_PORT=10010
        - EXPORT_PSKS=testing-a-psk
        - EXPORT_ENABLE_APPS={"urn:redhat:application:inventory":["urn:redhat:application:inventory:export:systems"]}
      depends_on:
        db:
          condition: service_healthy
      volumes:
        - './.export-service:/.export-service'
      ports:
        - "8001:8001"
        - "9090:9090"
        - "10010:10010"
      command: >
        /bin/sh -c "export-service migrate_db upgrade;
        export-service api_server;
        "

    zookeeper:
      container_name: zookeeper
      image: docker.io/confluentinc/cp-zookeeper:7.4.4
      environment:
        - ZOOKEEPER_CLIENT_PORT=32181
        - ZOOKEEPER_SERVER_ID=1

    kafka:
      container_name: kafka
      image: docker.io/confluentinc/cp-kafka:7.4.4
      restart: always
      ports:
        - "29092:29092"
        - "9092:9092"
      depends_on:
        - zookeeper
      environment:
        - KAFKA_ADVERTISED_LISTENERS=DOCKER://${KAFKA_QUEUE_HOST-kafka}:${KAFKA_QUEUE_PORT-29092},LOCALHOST://localhost:${KAFKA_QUEUE_PORT-9092}
        - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=DOCKER:PLAINTEXT,LOCALHOST:PLAINTEXT
        - KAFKA_INTER_BROKER_LISTENER_NAME=DOCKER
        - KAFKA_BROKER_ID=1
        - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
        - KAFKA_ZOOKEEPER_CONNECT=zookeeper:32181
        - KAFKA_AUTO_CREATE_TOPICS_ENABLE=true

    unleash:
      container_name: unleash
      image: quay.io/cloudservices/unleash-server:4.21.0
      environment:
        - INIT_ADMIN_API_TOKENS=${UNLEASH_TOKEN:?}
        - CHECK_VERSION=false
        - DATABASE_HOST=db
        - DATABASE_NAME=unleash
        - DATABASE_USERNAME=${DATABASE_USER-insights}
        - DATABASE_PASSWORD=${DATABASE_PASSWORD-insights}
        - DATABASE_SSL=false
        - IMPORT_DROP_BEFORE_IMPORT=false
        - IMPORT_FILE=/.unleash/flags.json
        - IMPORT_DROP_BEFORE_IMPORT=true
        - LOG_LEVEL=INFO
      ports:
        - "4242:4242"
      volumes:
        - './.unleash:/.unleash'
      depends_on:
        db:
          condition: service_healthy

    prometheus-gateway:
      container_name: prometheus_gateway
      image: quay.io/prometheus/pushgateway
      ports:
        - "9091:9091"

    minio:
      container_name: minio
      image: docker.io/minio/minio
      ports:
        - "9099:9099"
        - "9991:9991"
      volumes:
        - ./tmp/minio:/data:Z
      environment:
        - MINIO_ROOT_USER=${AWS_ACCESS_KEY-minio}
        - MINIO_ROOT_PASSWORD=${AWS_SECRET_ACCESS_KEY-minioadmin}
      command: server --address 0.0.0.0:9099 --console-address 0.0.0.0:9991 /data

    s3-createbucket:
      container_name: s3-createbucket
      image: docker.io/minio/mc
      depends_on:
        - minio
      restart: on-failure
      entrypoint: >
        /bin/sh -c "
        sleep 10;
        /usr/bin/mc config host add myminio http://minio:9099 ${AWS_ACCESS_KEY-minio} ${AWS_SECRET_ACCESS_KEY-minioadmin};
        /usr/bin/mc alias set minio http://minio:9099 ${AWS_ACCESS_KEY-minio} ${AWS_SECRET_ACCESS_KEY-minioadmin};
        /usr/bin/mc mb --ignore-existing myminio/exports-bucket;
        /usr/bin/mc policy set public myminio/exports-bucket;
        exit 0;
        "

    hbi-web:
      container_name: hbi-web
      build: .
      ports:
        - "8080:8080"
      environment:
        - LISTEN_PORT=${LISTEN_PORT:-8080}
        - FLASK_ENV=${FLASK_ENV:-development}
        - FLASK_DEBUG=${FLASK_DEBUG:-1}
        - CLOWDER_ENABLED=${CLOWDER_ENABLED:-false}
        - INVENTORY_LOG_LEVEL=${INVENTORY_LOG_LEVEL:-DEBUG}
        - INVENTORY_DB_HOST=db
        - INVENTORY_DB_NAME=${INVENTORY_DB_NAME:-insights}
        - INVENTORY_DB_USER=${INVENTORY_DB_USER:-insights}
        - INVENTORY_DB_PASS=${INVENTORY_DB_PASS:-insights}
        - INVENTORY_DB_POOL_TIMEOUT=${INVENTORY_DB_POOL_TIMEOUT:-5}
        - INVENTORY_DB_POOL_SIZE=${INVENTORY_DB_POOL_SIZE:-5}
        - INVENTORY_DB_SSL_MODE=${INVENTORY_DB_SSL_MODE}
        - INVENTORY_DB_SSL_CERT=${INVENTORY_DB_SSL_CERT}
        - UNLEASH_TOKEN=${UNLEASH_TOKEN}
        - UNLEASH_CACHE_DIR=${UNLEASH_CACHE_DIR}
        - UNLEASH_URL=${UNLEASH_URL}
        - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
        - KAFKA_EVENT_TOPIC=platform.inventory.events
        - KAFKA_EXPORT_SERVICE_TOPIC=${KAFKA_EXPORT_SERVICE_TOPIC}
        - PROMETHEUS_MULTIPROC_DIR=${PROMETHEUS_MULTIPROC_DIR}
        - BYPASS_RBAC=${BYPASS_RBAC:-false}
        - BYPASS_UNLEASH=${BYPASS_UNLEASH}
      depends_on:
        db:
          condition: service_healthy
        kafka:
          condition: service_started
      volumes:
        - .:/opt/app-root/src
      command: python3 dev_server.py

    hbi-mq:
      container_name: hbi-mq
      build: .
      environment:
        - INVENTORY_LOG_LEVEL=${INVENTORY_LOG_LEVEL:-DEBUG}
        - INVENTORY_DB_HOST=db
        - INVENTORY_DB_NAME=${INVENTORY_DB_NAME:-insights}
        - INVENTORY_DB_USER=${INVENTORY_DB_USER:-insights}
        - INVENTORY_DB_PASS=${INVENTORY_DB_PASS:-insights}
        - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
        - KAFKA_EVENT_TOPIC=platform.inventory.events
        - PAYLOAD_TRACKER_SERVICE_NAME=inventory-mq-service
      depends_on:
        db:
          condition: service_healthy
        kafka:
          condition: service_started
      volumes:
        - .:/opt/app-root/src
      command: python3 inv_mq_service.py
