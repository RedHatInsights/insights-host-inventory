"""workspace_id added to groups

Revision ID: f38ba35bb464
Revises: 286343296975
Create Date: 2025-03-03 08:20:48.133984

"""

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "f38ba35bb464"
down_revision = "286343296975"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "groups",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("account", sa.String(length=10), nullable=True),
        sa.Column("org_id", sa.String(length=36), nullable=False),
        sa.Column("name", sa.String(length=255), nullable=False),
        sa.Column("created_on", sa.DateTime(timezone=True), nullable=True),
        sa.Column("modified_on", sa.DateTime(timezone=True), nullable=True),
        sa.PrimaryKeyConstraint("id"),
        schema="hbi",
    )
    with op.batch_alter_table("groups", schema="hbi") as batch_op:
        batch_op.create_index("idx_groups_org_id_name_nocase", ["org_id", sa.text("lower(name)")], unique=True)
        batch_op.create_index("idxgrouporgid", ["org_id"], unique=False)

    op.create_table(
        "hbi_metadata",
        sa.Column("name", sa.String(length=32), nullable=False),
        sa.Column("type", sa.String(length=32), nullable=False),
        sa.Column("last_succeeded", sa.DateTime(timezone=True), nullable=True),
        sa.PrimaryKeyConstraint("name", "type"),
        schema="hbi",
    )
    op.create_table(
        "hosts",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("account", sa.String(length=10), nullable=True),
        sa.Column("org_id", sa.String(length=36), nullable=True),
        sa.Column("display_name", sa.String(length=200), nullable=True),
        sa.Column("ansible_host", sa.String(length=255), nullable=True),
        sa.Column("created_on", sa.DateTime(timezone=True), nullable=True),
        sa.Column("modified_on", sa.DateTime(timezone=True), nullable=True),
        sa.Column("facts", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column("tags", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column("canonical_facts", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column("system_profile_facts", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column("groups", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column("workspace_id", sa.UUID(), nullable=True),
        sa.Column("workspace_name", sa.String(length=255), nullable=True),
        sa.Column("stale_timestamp", sa.DateTime(timezone=True), nullable=True),
        sa.Column("reporter", sa.String(length=255), nullable=True),
        sa.Column("per_reporter_staleness", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.PrimaryKeyConstraint("id"),
        schema="hbi",
    )
    with op.batch_alter_table("hosts", schema="hbi") as batch_op:
        batch_op.create_index(
            "hosts_subscription_manager_id_index",
            [sa.text("(canonical_facts ->> 'subscription_manager_id')")],
            unique=False,
        )
        batch_op.create_index("idxdisplay_name", ["display_name"], unique=False)
        batch_op.create_index("idxgincanonicalfacts", ["canonical_facts"], unique=False)
        batch_op.create_index("idxgroups", ["groups"], unique=False, postgresql_using="gin")
        batch_op.create_index("idxinsightsid", [sa.text("(canonical_facts ->> 'insights_id')")], unique=False)
        batch_op.create_index("idxorgid", ["org_id"], unique=False)
        batch_op.create_index(
            "idxsystem_profile_facts", ["system_profile_facts"], unique=False, postgresql_using="gin"
        )
        batch_op.create_index("idxworkspaceid", ["workspace_id"], unique=False)
        batch_op.create_index("idxworkspacename", ["workspace_name"], unique=False)

    op.create_table(
        "staleness",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("org_id", sa.String(length=36), nullable=False),
        sa.Column("conventional_time_to_stale", sa.Integer(), nullable=False),
        sa.Column("conventional_time_to_stale_warning", sa.Integer(), nullable=False),
        sa.Column("conventional_time_to_delete", sa.Integer(), nullable=False),
        sa.Column("immutable_time_to_stale", sa.Integer(), nullable=False),
        sa.Column("immutable_time_to_stale_warning", sa.Integer(), nullable=False),
        sa.Column("immutable_time_to_delete", sa.Integer(), nullable=False),
        sa.Column("created_on", sa.DateTime(timezone=True), nullable=True),
        sa.Column("modified_on", sa.DateTime(timezone=True), nullable=True),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("org_id", name="staleness_unique_org_id"),
        schema="hbi",
    )
    with op.batch_alter_table("staleness", schema="hbi") as batch_op:
        batch_op.create_index("idxaccstaleorgid", ["org_id"], unique=False)

    op.create_table(
        "ungrouped_workspaces",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("org_id", sa.String(length=36), nullable=False),
        sa.Column("name", sa.String(length=255), nullable=False),
        sa.Column("created_on", sa.DateTime(timezone=True), nullable=False),
        sa.Column("modified_on", sa.DateTime(timezone=True), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        schema="hbi",
    )
    with op.batch_alter_table("ungrouped_workspaces", schema="hbi") as batch_op:
        batch_op.create_index("idxuwname", ["name"], unique=False)
        batch_op.create_index("idxuworgid", ["org_id"], unique=False)

    op.create_table(
        "assignment_rules",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("org_id", sa.String(length=36), nullable=False),
        sa.Column("account", sa.String(length=10), nullable=True),
        sa.Column("name", sa.String(length=255), nullable=False),
        sa.Column("description", sa.String(length=255), nullable=True),
        sa.Column("group_id", sa.UUID(), nullable=True),
        sa.Column("filter", postgresql.JSONB(astext_type=sa.Text()), nullable=False),
        sa.Column("enabled", sa.Boolean(), nullable=True),
        sa.Column("created_on", sa.DateTime(timezone=True), nullable=True),
        sa.Column("modified_on", sa.DateTime(timezone=True), nullable=True),
        sa.ForeignKeyConstraint(
            ["group_id"],
            ["hbi.groups.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        schema="hbi",
    )
    with op.batch_alter_table("assignment_rules", schema="hbi") as batch_op:
        batch_op.create_index("idxassrulesorgid", ["org_id"], unique=False)

    op.create_table(
        "hosts_groups",
        sa.Column("host_id", sa.UUID(), nullable=False),
        sa.Column("group_id", sa.UUID(), nullable=False),
        sa.ForeignKeyConstraint(
            ["group_id"],
            ["hbi.groups.id"],
        ),
        sa.ForeignKeyConstraint(
            ["host_id"],
            ["hbi.hosts.id"],
        ),
        sa.PrimaryKeyConstraint("host_id", "group_id"),
        sa.UniqueConstraint("host_id", name="hosts_groups_unique_host_id"),
        schema="hbi",
    )
    with op.batch_alter_table("hosts_groups", schema="hbi") as batch_op:
        batch_op.create_index("idxgroups_hosts", ["group_id", "host_id"], unique=False)
        batch_op.create_index("idxhostsgroups", ["host_id", "group_id"], unique=False)

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("hosts_groups", schema="hbi") as batch_op:
        batch_op.drop_index("idxhostsgroups")
        batch_op.drop_index("idxgroups_hosts")

    op.drop_table("hosts_groups", schema="hbi")
    with op.batch_alter_table("assignment_rules", schema="hbi") as batch_op:
        batch_op.drop_index("idxassrulesorgid")

    op.drop_table("assignment_rules", schema="hbi")
    with op.batch_alter_table("ungrouped_workspaces", schema="hbi") as batch_op:
        batch_op.drop_index("idxuworgid")
        batch_op.drop_index("idxuwname")

    op.drop_table("ungrouped_workspaces", schema="hbi")
    with op.batch_alter_table("staleness", schema="hbi") as batch_op:
        batch_op.drop_index("idxaccstaleorgid")

    op.drop_table("staleness", schema="hbi")
    with op.batch_alter_table("hosts", schema="hbi") as batch_op:
        batch_op.drop_index("idxworkspacename")
        batch_op.drop_index("idxworkspaceid")
        batch_op.drop_index("idxsystem_profile_facts", postgresql_using="gin")
        batch_op.drop_index("idxorgid")
        batch_op.drop_index("idxinsightsid")
        batch_op.drop_index("idxgroups", postgresql_using="gin")
        batch_op.drop_index("idxgincanonicalfacts")
        batch_op.drop_index("idxdisplay_name")
        batch_op.drop_index("hosts_subscription_manager_id_index")

    op.drop_table("hosts", schema="hbi")
    op.drop_table("hbi_metadata", schema="hbi")
    with op.batch_alter_table("groups", schema="hbi") as batch_op:
        batch_op.drop_index("idxgrouporgid")
        batch_op.drop_index("idx_groups_org_id_name_nocase")

    op.drop_table("groups", schema="hbi")
    # ### end Alembic commands ###
