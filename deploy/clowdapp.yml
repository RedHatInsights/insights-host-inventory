apiVersion: template.openshift.io/v1
kind: Template
metadata:
  name: insights-host-inventory
objects:
- apiVersion: cloud.redhat.com/v1alpha1
  kind: ClowdApp
  metadata:
    name: ${CLOWDAPP_NAME}
  spec:
    envName: ${ENV_NAME}
    featureFlags: true
    inMemoryDb: true
    testing:
      iqePlugin: host-inventory
    dependencies:
      - rbac
      - ingress
      - export-service
    deployments:
    - name: service
      podSpec:
        command:
        - nginx
        - -g
        - daemon off;
        env:
        - name: CLOWDER_ENABLED
          value: ${CLOWDER_ENABLED}
        - name: APP_POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        image: quay.io/cloudservices/ubi8-nginx-124:1-39.1741813445
        livenessProbe:
          failureThreshold: 5
          httpGet:
            path: /healthz
            port: web
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 20
          successThreshold: 1
          timeoutSeconds: 10
        readinessProbe:
          failureThreshold: 5
          httpGet:
            path: /healthz
            port: web
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 20
          successThreshold: 1
          timeoutSeconds: 10
        resources:
          limits:
            cpu: ${NGINX_CPU_LIMIT}
            memory: ${NGINX_MEMORY_LIMIT}
          requests:
            cpu: ${NGINX_CPU_REQUEST}
            memory: ${NGINX_MEMORY_REQUEST}
        volumeMounts:
        - mountPath: /etc/nginx
          name: api-nginx-conf
        volumes:
        - configMap:
            name: inventory-nginx-conf
          name: api-nginx-conf
      replicas: ${{NGINX_REPLICAS}}
      webServices:
        private:
          enabled: false
        public:
          apiPath: inventory
          enabled: true
    - name: service-reads
      replicas: ${{REPLICAS_SVC_READS}}
      webServices:
        public:
          enabled: true
      podSpec:
        image: ${IMAGE}:${IMAGE_TAG}
        args: [
          "gunicorn",
          "--workers=${GUNICORN_WORKERS}",
          "--threads=${GUNICORN_THREADS}",
          "--limit-request-field_size=${GUNICORN_REQUEST_FIELD_LIMIT}",
          "--limit-request-line=${GUNICORN_REQUEST_LINE_LIMIT}",
          "--worker-tmp-dir=/gunicorn",
          "--log-file=-",
          "--access-logfile=-",
          "-c",
          "gunicorn.conf.py",
          "-b",
          "0.0.0.0:8000",
          "-t",
          "60",
          "--worker-class=uvicorn.workers.UvicornWorker",
          "run:app"
        ]
        env:
        - name: APP_NAME
          value: ${APP_NAME}
        - name: PATH_PREFIX
          value: ${PATH_PREFIX}
        - name: CONSOLEDOT_HOSTNAME
          value: ${CONSOLEDOT_HOSTNAME}
        - name: INVENTORY_LEGACY_API_URL
          value: /r/insights/platform/inventory/v1
        - name: PROMETHEUS_MULTIPROC_DIR
          value: /tmp/inventory/prometheus
        - name: INVENTORY_LOG_LEVEL
          value: ${LOG_LEVEL}
        - name: URLLIB3_LOG_LEVEL
          value: ${URLLIB3_LOG_LEVEL}
        - name: INVENTORY_DB_SSL_MODE
          value: ${INVENTORY_DB_SSL_MODE}
        - name: PAYLOAD_TRACKER_SERVICE_NAME
          value: inventory
        - name: PAYLOAD_TRACKER_ENABLED
          value: 'true'
        - name: BYPASS_RBAC
          value: ${BYPASS_RBAC}
        - name: KAFKA_PRODUCER_ACKS
          value: ${KAFKA_PRODUCER_ACKS}
        - name: KAFKA_PRODUCER_RETRIES
          value: ${KAFKA_PRODUCER_RETRIES}
        - name: KAFKA_PRODUCER_RETRY_BACKOFF_MS
          value: ${KAFKA_PRODUCER_RETRY_BACKOFF_MS}
        - name: KAFKA_SECURITY_PROTOCOL
          value: ${KAFKA_SECURITY_PROTOCOL}
        - name: KAFKA_SASL_MECHANISM
          value: ${KAFKA_SASL_MECHANISM}
        - name: KAFKA_EVENT_TOPIC
          value: ${KAFKA_EVENT_TOPIC}
        - name: KAFKA_NOTIFICATION_TOPIC
          value: ${KAFKA_NOTIFICATION_TOPIC}
        - name: TENANT_TRANSLATOR_URL
          value: http://${TENANT_TRANSLATOR_HOST}:${TENANT_TRANSLATOR_PORT}/internal/orgIds
        - name: BYPASS_TENANT_TRANSLATION
          value: ${BYPASS_TENANT_TRANSLATION}
        - name: CLOWDER_ENABLED
          value: "true"
        - name: INVENTORY_DB_STATEMENT_TIMEOUT
          value: "${INVENTORY_DB_STATEMENT_TIMEOUT}"
        - name: INVENTORY_DB_LOCK_TIMEOUT
          value: "${INVENTORY_DB_LOCK_TIMEOUT}"
        - name: INVENTORY_DB_SCHEMA
          value: "${INVENTORY_DB_SCHEMA}"
        - name: INVENTORY_API_CACHE_TIMEOUT_SECONDS
          value: "${INVENTORY_API_CACHE_TIMEOUT_SECONDS}"
        - name: INVENTORY_API_CACHE_TYPE
          value: "${INVENTORY_API_CACHE_TYPE}"
        - name: INVENTORY_CACHE_INSIGHTS_CLIENT_SYSTEM_TIMEOUT_SEC
          value: "${INVENTORY_CACHE_INSIGHTS_CLIENT_SYSTEM_TIMEOUT_SEC}"
        - name: INVENTORY_CACHE_THREAD_POOL_MAX_WORKERS
          value: "${INVENTORY_CACHE_THREAD_POOL_MAX_WORKERS}"
        - name: INVENTORY_API_USE_READREPLICA
          value: "${INVENTORY_API_USE_READREPLICA}"
        - name: UNLEASH_URL
          value: ${UNLEASH_URL}
        - name: UNLEASH_TOKEN
          valueFrom:
            secretKeyRef:
              name: ${UNLEASH_SECRET_NAME}
              key: CLIENT_ACCESS_TOKEN
              optional: true
        - name: BYPASS_UNLEASH
          value: ${BYPASS_UNLEASH}
        - name: UNLEASH_REFRESH_INTERVAL
          value: ${UNLEASH_REFRESH_INTERVAL}
        - name: RBAC_V2_FORCE_ORG_ADMIN
          value: ${RBAC_V2_FORCE_ORG_ADMIN}
        - name: SEGMENTIO_WRITE_KEY
          valueFrom:
            secretKeyRef:
              name: segmentio
              key: WRITE_KEY
              optional: true
        resources:
          limits:
            cpu: ${CPU_LIMIT_SERVICE}
            memory: ${MEMORY_LIMIT_SERVICE}
          requests:
            cpu: ${CPU_REQUEST_SERVICE}
            memory: ${MEMORY_REQUEST_SERVICE}
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /health
            port: 8000
            scheme: HTTP
          periodSeconds: ${{INVENTORY_API_READS_LIVENESS_PROBE_PERIOD_SECONDS}}
          successThreshold: 1
          timeoutSeconds: ${{INVENTORY_API_READS_LIVENESS_PROBE_TIMEOUT_SECONDS}}
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /health
            port: 8000
            scheme: HTTP
          periodSeconds: ${{INVENTORY_API_READS_READINESS_PROBE_PERIOD_SECONDS}}
          successThreshold: 1
          timeoutSeconds: ${{INVENTORY_API_READS_READINESS_PROBE_TIMEOUT_SECONDS}}
        volumeMounts:
        - mountPath: /tmp/inventory/prometheus
          name: prometheus-volume
        - mountPath: /gunicorn
          name: gunicorn-worker-dir
        - mountPath: /etc/db/readreplica
          name: host-inventory-read-only-db
          readOnly: true
        volumes:
        - emptyDir: {}
          name: prometheus-volume
        - emptyDir:
            medium: Memory
          name: gunicorn-worker-dir
        - name: host-inventory-read-only-db
          secret:
            items:
            - key: db.host
              path: db_host
            - key: db.name
              path: db_name
            - key: db.password
              path: db_password
            - key: db.port
              path: db_port
            - key: db.user
              path: db_user
            secretName: ${INVENTORY_API_READREPLICA_SECRET}
            optional: true
    - name: service-secondary-reads
      replicas: ${{REPLICAS_SVC_SECONDARY_READS}}
      webServices:
        public:
          enabled: true
      podSpec:
        image: ${IMAGE}:${IMAGE_TAG}
        args: [
          "gunicorn",
          "--workers=${GUNICORN_WORKERS}",
          "--threads=${GUNICORN_THREADS}",
          "--limit-request-field_size=${GUNICORN_REQUEST_FIELD_LIMIT}",
          "--limit-request-line=${GUNICORN_REQUEST_LINE_LIMIT}",
          "--worker-tmp-dir=/gunicorn",
          "--log-file=-",
          "--access-logfile=-",
          "-c",
          "gunicorn.conf.py",
          "-b",
          "0.0.0.0:8000",
          "-t",
          "60",
          "--worker-class=uvicorn.workers.UvicornWorker",
          "run:app"
        ]
        env:
        - name: APP_NAME
          value: ${APP_NAME}
        - name: PATH_PREFIX
          value: ${PATH_PREFIX}
        - name: CONSOLEDOT_HOSTNAME
          value: ${CONSOLEDOT_HOSTNAME}
        - name: INVENTORY_LEGACY_API_URL
          value: /r/insights/platform/inventory/v1
        - name: PROMETHEUS_MULTIPROC_DIR
          value: /tmp/inventory/prometheus
        - name: INVENTORY_LOG_LEVEL
          value: ${LOG_LEVEL}
        - name: URLLIB3_LOG_LEVEL
          value: ${URLLIB3_LOG_LEVEL}
        - name: INVENTORY_DB_SSL_MODE
          value: ${INVENTORY_DB_SSL_MODE}
        - name: PAYLOAD_TRACKER_SERVICE_NAME
          value: inventory
        - name: PAYLOAD_TRACKER_ENABLED
          value: 'true'
        - name: BYPASS_RBAC
          value: ${BYPASS_RBAC}
        - name: KAFKA_PRODUCER_ACKS
          value: ${KAFKA_PRODUCER_ACKS}
        - name: KAFKA_PRODUCER_RETRIES
          value: ${KAFKA_PRODUCER_RETRIES}
        - name: KAFKA_PRODUCER_RETRY_BACKOFF_MS
          value: ${KAFKA_PRODUCER_RETRY_BACKOFF_MS}
        - name: KAFKA_SECURITY_PROTOCOL
          value: ${KAFKA_SECURITY_PROTOCOL}
        - name: KAFKA_SASL_MECHANISM
          value: ${KAFKA_SASL_MECHANISM}
        - name: KAFKA_EVENT_TOPIC
          value: ${KAFKA_EVENT_TOPIC}
        - name: KAFKA_NOTIFICATION_TOPIC
          value: ${KAFKA_NOTIFICATION_TOPIC}
        - name: TENANT_TRANSLATOR_URL
          value: http://${TENANT_TRANSLATOR_HOST}:${TENANT_TRANSLATOR_PORT}/internal/orgIds
        - name: BYPASS_TENANT_TRANSLATION
          value: ${BYPASS_TENANT_TRANSLATION}
        - name: CLOWDER_ENABLED
          value: "true"
        - name: INVENTORY_DB_STATEMENT_TIMEOUT
          value: "${INVENTORY_DB_STATEMENT_TIMEOUT}"
        - name: INVENTORY_DB_LOCK_TIMEOUT
          value: "${INVENTORY_DB_LOCK_TIMEOUT}"
        - name: INVENTORY_DB_SCHEMA
          value: "${INVENTORY_DB_SCHEMA}"
        - name: INVENTORY_API_CACHE_TIMEOUT_SECONDS
          value: "${INVENTORY_API_CACHE_TIMEOUT_SECONDS}"
        - name: INVENTORY_API_CACHE_TYPE
          value: "${INVENTORY_API_CACHE_TYPE}"
        - name: INVENTORY_CACHE_INSIGHTS_CLIENT_SYSTEM_TIMEOUT_SEC
          value: "${INVENTORY_CACHE_INSIGHTS_CLIENT_SYSTEM_TIMEOUT_SEC}"
        - name: INVENTORY_CACHE_THREAD_POOL_MAX_WORKERS
          value: "${INVENTORY_CACHE_THREAD_POOL_MAX_WORKERS}"
        - name: INVENTORY_API_USE_READREPLICA
          value: "${INVENTORY_API_USE_READREPLICA}"
        - name: UNLEASH_URL
          value: ${UNLEASH_URL}
        - name: UNLEASH_TOKEN
          valueFrom:
            secretKeyRef:
              name: ${UNLEASH_SECRET_NAME}
              key: CLIENT_ACCESS_TOKEN
              optional: true
        - name: BYPASS_UNLEASH
          value: ${BYPASS_UNLEASH}
        - name: UNLEASH_REFRESH_INTERVAL
          value: ${UNLEASH_REFRESH_INTERVAL}
        - name: SEGMENTIO_WRITE_KEY
          valueFrom:
            secretKeyRef:
              name: segmentio
              key: WRITE_KEY
              optional: true
        resources:
          limits:
            cpu: ${CPU_LIMIT_SERVICE}
            memory: ${MEMORY_LIMIT_SERVICE}
          requests:
            cpu: ${CPU_REQUEST_SERVICE}
            memory: ${MEMORY_REQUEST_SERVICE}
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /health
            port: 8000
            scheme: HTTP
          periodSeconds: ${{INVENTORY_API_READS_LIVENESS_PROBE_PERIOD_SECONDS}}
          successThreshold: 1
          timeoutSeconds: ${{INVENTORY_API_READS_LIVENESS_PROBE_TIMEOUT_SECONDS}}
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /health
            port: 8000
            scheme: HTTP
          periodSeconds: ${{INVENTORY_API_READS_READINESS_PROBE_PERIOD_SECONDS}}
          successThreshold: 1
          timeoutSeconds: ${{INVENTORY_API_READS_READINESS_PROBE_TIMEOUT_SECONDS}}
        volumeMounts:
        - mountPath: /tmp/inventory/prometheus
          name: prometheus-volume
        - mountPath: /gunicorn
          name: gunicorn-worker-dir
        - mountPath: /etc/db/readreplica
          name: host-inventory-read-only-db
          readOnly: true
        volumes:
        - emptyDir: {}
          name: prometheus-volume
        - emptyDir:
            medium: Memory
          name: gunicorn-worker-dir
        - name: host-inventory-read-only-db
          secret:
            items:
            - key: db.host
              path: db_host
            - key: db.name
              path: db_name
            - key: db.password
              path: db_password
            - key: db.port
              path: db_port
            - key: db.user
              path: db_user
            secretName: ${INVENTORY_API_SECONDARY_READREPLICA_SECRET}
            optional: true
    - name: service-writes
      replicas: ${{REPLICAS_SVC_WRITES}}
      webServices:
        public:
          enabled: true
      podSpec:
        image: ${IMAGE}:${IMAGE_TAG}
        args: [
          "gunicorn",
          "--workers=${GUNICORN_WORKERS}",
          "--threads=${GUNICORN_THREADS}",
          "--limit-request-field_size=${GUNICORN_REQUEST_FIELD_LIMIT}",
          "--limit-request-line=${GUNICORN_REQUEST_LINE_LIMIT}",
          "--worker-tmp-dir=/gunicorn",
          "--log-file=-",
          "--access-logfile=-",
          "-c",
          "gunicorn.conf.py",
          "-b",
          "0.0.0.0:8000",
          "-t",
          "60",
          "--worker-class=uvicorn.workers.UvicornWorker",
          "run:app"
        ]
        env:
        - name: APP_NAME
          value: ${APP_NAME}
        - name: PATH_PREFIX
          value: ${PATH_PREFIX}
        - name: CONSOLEDOT_HOSTNAME
          value: ${CONSOLEDOT_HOSTNAME}
        - name: INVENTORY_LEGACY_API_URL
          value: /r/insights/platform/inventory/v1
        - name: PROMETHEUS_MULTIPROC_DIR
          value: /tmp/inventory/prometheus
        - name: INVENTORY_LOG_LEVEL
          value: ${LOG_LEVEL}
        - name: URLLIB3_LOG_LEVEL
          value: ${URLLIB3_LOG_LEVEL}
        - name: INVENTORY_DB_SSL_MODE
          value: ${INVENTORY_DB_SSL_MODE}
        - name: PAYLOAD_TRACKER_SERVICE_NAME
          value: inventory
        - name: PAYLOAD_TRACKER_ENABLED
          value: 'true'
        - name: BYPASS_RBAC
          value: ${BYPASS_RBAC}
        - name: KAFKA_PRODUCER_ACKS
          value: ${KAFKA_PRODUCER_ACKS}
        - name: KAFKA_PRODUCER_RETRIES
          value: ${KAFKA_PRODUCER_RETRIES}
        - name: KAFKA_PRODUCER_RETRY_BACKOFF_MS
          value: ${KAFKA_PRODUCER_RETRY_BACKOFF_MS}
        - name: KAFKA_SECURITY_PROTOCOL
          value: ${KAFKA_SECURITY_PROTOCOL}
        - name: KAFKA_SASL_MECHANISM
          value: ${KAFKA_SASL_MECHANISM}
        - name: KAFKA_EVENT_TOPIC
          value: ${KAFKA_EVENT_TOPIC}
        - name: KAFKA_NOTIFICATION_TOPIC
          value: ${KAFKA_NOTIFICATION_TOPIC}
        - name: TENANT_TRANSLATOR_URL
          value: http://${TENANT_TRANSLATOR_HOST}:${TENANT_TRANSLATOR_PORT}/internal/orgIds
        - name: BYPASS_TENANT_TRANSLATION
          value: ${BYPASS_TENANT_TRANSLATION}
        - name: CLOWDER_ENABLED
          value: "true"
        - name: INVENTORY_DB_STATEMENT_TIMEOUT
          value: "${INVENTORY_DB_STATEMENT_TIMEOUT}"
        - name: INVENTORY_DB_LOCK_TIMEOUT
          value: "${INVENTORY_DB_LOCK_TIMEOUT}"
        - name: INVENTORY_DB_SCHEMA
          value: "${INVENTORY_DB_SCHEMA}"
        - name: INVENTORY_API_CACHE_TIMEOUT_SECONDS
          value: "${INVENTORY_API_CACHE_TIMEOUT_SECONDS}"
        - name: INVENTORY_API_CACHE_TYPE
          value: "${INVENTORY_API_CACHE_TYPE}"
        - name: INVENTORY_CACHE_INSIGHTS_CLIENT_SYSTEM_TIMEOUT_SEC
          value: "${INVENTORY_CACHE_INSIGHTS_CLIENT_SYSTEM_TIMEOUT_SEC}"
        - name: INVENTORY_CACHE_THREAD_POOL_MAX_WORKERS
          value: "${INVENTORY_CACHE_THREAD_POOL_MAX_WORKERS}"
        - name: UNLEASH_URL
          value: ${UNLEASH_URL}
        - name: UNLEASH_TOKEN
          valueFrom:
            secretKeyRef:
              name: ${UNLEASH_SECRET_NAME}
              key: CLIENT_ACCESS_TOKEN
              optional: true
        - name: BYPASS_UNLEASH
          value: ${BYPASS_UNLEASH}
        - name: UNLEASH_REFRESH_INTERVAL
          value: ${UNLEASH_REFRESH_INTERVAL}
        - name: RBAC_V2_FORCE_ORG_ADMIN
          value: ${RBAC_V2_FORCE_ORG_ADMIN}
        - name: SEGMENTIO_WRITE_KEY
          valueFrom:
            secretKeyRef:
              name: segmentio
              key: WRITE_KEY
              optional: true
        - name: RBAC_PSKS
          valueFrom:
            secretKeyRef:
              key: psks.json
              name: rbac-psks
              optional: false
        resources:
          limits:
            cpu: ${CPU_LIMIT_SERVICE}
            memory: ${MEMORY_LIMIT_SERVICE}
          requests:
            cpu: ${CPU_REQUEST_SERVICE}
            memory: ${MEMORY_REQUEST_SERVICE}
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /health
            port: 8000
            scheme: HTTP
          periodSeconds: ${{INVENTORY_API_WRITES_LIVENESS_PROBE_PERIOD_SECONDS}}
          successThreshold: 1
          timeoutSeconds: ${{INVENTORY_API_WRITES_LIVENESS_PROBE_TIMEOUT_SECONDS}}
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /health
            port: 8000
            scheme: HTTP
          periodSeconds: ${{INVENTORY_API_WRITES_READINESS_PROBE_PERIOD_SECONDS}}
          successThreshold: 1
          timeoutSeconds: ${{INVENTORY_API_WRITES_READINESS_PROBE_TIMEOUT_SECONDS}}
        volumeMounts:
        - mountPath: /tmp/inventory/prometheus
          name: prometheus-volume
        - mountPath: /gunicorn
          name: gunicorn-worker-dir
        volumes:
        - emptyDir: {}
          name: prometheus-volume
        - emptyDir:
            medium: Memory
          name: gunicorn-worker-dir
    - name: mq-pmin
      replicas: ${{REPLICAS_PMIN}}
      podSpec:
        args: ["./inv_mq_service.py"]
        env:
        - name: CONSOLEDOT_HOSTNAME
          value: ${CONSOLEDOT_HOSTNAME}
        - name: INVENTORY_LOG_LEVEL
          value: ${LOG_LEVEL}
        - name: INVENTORY_DB_SSL_MODE
          value: ${INVENTORY_DB_SSL_MODE}
        - name: INVENTORY_DB_SSL_CERT
          value: ${INVENTORY_DB_SSL_CERT}
        - name: KAFKA_CONSUMER_TOPIC
          value: ${KAFKA_HOST_INGRESS_TOPIC}
        - name: KAFKA_HOST_INGRESS_TOPIC
          value: ${KAFKA_HOST_INGRESS_TOPIC}
        - name: KAFKA_EVENT_TOPIC
          value: ${KAFKA_EVENT_TOPIC}
        - name: KAFKA_NOTIFICATION_TOPIC
          value: ${KAFKA_NOTIFICATION_TOPIC}
        - name: KAFKA_SYSTEM_PROFILE_TOPIC
          value: ${KAFKA_SYSTEM_PROFILE_TOPIC}
        - name: KAFKA_HOST_INGRESS_GROUP
          value: ${KAFKA_HOST_INGRESS_GROUP}
        - name: PAYLOAD_TRACKER_SERVICE_NAME
          value: inventory-mq-service
        - name: PAYLOAD_TRACKER_ENABLED
          value: 'true'
        - name: KAFKA_PRODUCER_ACKS
          value: ${KAFKA_PRODUCER_ACKS}
        - name: KAFKA_PRODUCER_RETRIES
          value: ${KAFKA_PRODUCER_RETRIES}
        - name: KAFKA_PRODUCER_RETRY_BACKOFF_MS
          value: ${KAFKA_PRODUCER_RETRY_BACKOFF_MS}
        - name: KAFKA_SECURITY_PROTOCOL
          value: ${KAFKA_SECURITY_PROTOCOL}
        - name: KAFKA_SASL_MECHANISM
          value: ${KAFKA_SASL_MECHANISM}
        - name: TENANT_TRANSLATOR_URL
          value: http://${TENANT_TRANSLATOR_HOST}:${TENANT_TRANSLATOR_PORT}/internal/orgIds
        - name: BYPASS_TENANT_TRANSLATION
          value: ${BYPASS_TENANT_TRANSLATION}
        - name: CLOWDER_ENABLED
          value: "true"
        - name: INVENTORY_DB_SCHEMA
          value: "${INVENTORY_DB_SCHEMA}"
        - name: INVENTORY_API_CACHE_TIMEOUT_SECONDS
          value: "${INVENTORY_API_CACHE_TIMEOUT_SECONDS}"
        - name: INVENTORY_API_CACHE_TYPE
          value: "${INVENTORY_API_CACHE_TYPE}"
        - name: INVENTORY_CACHE_INSIGHTS_CLIENT_SYSTEM_TIMEOUT_SEC
          value: "${INVENTORY_CACHE_INSIGHTS_CLIENT_SYSTEM_TIMEOUT_SEC}"
        - name: INVENTORY_CACHE_THREAD_POOL_MAX_WORKERS
          value: "${INVENTORY_CACHE_THREAD_POOL_MAX_WORKERS}"
        - name: KAFKA_CONSUMER_SESSION_TIMEOUT_MS
          value: "${KAFKA_CONSUMER_SESSION_TIMEOUT_MS}"
        - name: KAFKA_CONSUMER_HEARTBEAT_INTERVAL_MS
          value: "${KAFKA_CONSUMER_HEARTBEAT_INTERVAL_MS}"
        - name: UNLEASH_URL
          value: ${UNLEASH_URL}
        - name: UNLEASH_TOKEN
          valueFrom:
            secretKeyRef:
              name: ${UNLEASH_SECRET_NAME}
              key: CLIENT_ACCESS_TOKEN
              optional: true
        - name: BYPASS_UNLEASH
          value: ${BYPASS_UNLEASH}
        - name: UNLEASH_REFRESH_INTERVAL
          value: ${UNLEASH_REFRESH_INTERVAL}
        - name: MQ_DB_BATCH_MAX_MESSAGES
          value: ${MQ_DB_BATCH_MAX_MESSAGES}
        - name: MQ_DB_BATCH_MAX_SECONDS
          value: ${MQ_DB_BATCH_MAX_SECONDS}
        - name: RBAC_V2_FORCE_ORG_ADMIN
          value: ${RBAC_V2_FORCE_ORG_ADMIN}
        - name: RBAC_PSKS
          valueFrom:
            secretKeyRef:
              key: psks.json
              name: rbac-psks
              optional: false
        image: ${IMAGE}:${IMAGE_TAG}
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /
            port: 9000
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        readinessProbe:
          tcpSocket:
            port: 9000
        resources:
          limits:
            cpu: ${CPU_LIMIT_MQ_PMIN}
            memory: ${MEMORY_LIMIT_MQ_PMIN}
          requests:
            cpu: ${CPU_REQUEST_MQ_PMIN}
            memory: ${MEMORY_REQUEST_MQ_PMIN}
    - name: mq-p1
      replicas: ${{REPLICAS_P1}}
      podSpec:
        initContainers:
        - args: ["FLASK_APP=./manage.py", "flask", "db", "upgrade"]
          inheritEnv: true
        args: ["./inv_mq_service.py"]
        env:
        - name: CONSOLEDOT_HOSTNAME
          value: ${CONSOLEDOT_HOSTNAME}
        - name: INVENTORY_LOG_LEVEL
          value: ${LOG_LEVEL}
        - name: INVENTORY_DB_SSL_MODE
          value: ${INVENTORY_DB_SSL_MODE}
        - name: INVENTORY_DB_SSL_CERT
          value: ${INVENTORY_DB_SSL_CERT}
        - name: KAFKA_CONSUMER_TOPIC
          value: ${KAFKA_HOST_INGRESS_P1_TOPIC}
        - name: KAFKA_HOST_INGRESS_TOPIC
          value: ${KAFKA_HOST_INGRESS_P1_TOPIC}
        - name: KAFKA_EVENT_TOPIC
          value: ${KAFKA_EVENT_TOPIC}
        - name: KAFKA_NOTIFICATION_TOPIC
          value: ${KAFKA_NOTIFICATION_TOPIC}
        - name: KAFKA_SYSTEM_PROFILE_TOPIC
          value: ${KAFKA_SYSTEM_PROFILE_TOPIC}
        - name: KAFKA_HOST_INGRESS_GROUP
          value: ${KAFKA_HOST_INGRESS_GROUP}
        - name: PAYLOAD_TRACKER_SERVICE_NAME
          value: inventory-mq-service
        - name: PAYLOAD_TRACKER_ENABLED
          value: 'true'
        - name: KAFKA_PRODUCER_ACKS
          value: ${KAFKA_PRODUCER_ACKS}
        - name: KAFKA_PRODUCER_RETRIES
          value: ${KAFKA_PRODUCER_RETRIES}
        - name: KAFKA_PRODUCER_RETRY_BACKOFF_MS
          value: ${KAFKA_PRODUCER_RETRY_BACKOFF_MS}
        - name: KAFKA_SECURITY_PROTOCOL
          value: ${KAFKA_SECURITY_PROTOCOL}
        - name: KAFKA_SASL_MECHANISM
          value: ${KAFKA_SASL_MECHANISM}
        - name: TENANT_TRANSLATOR_URL
          value: http://${TENANT_TRANSLATOR_HOST}:${TENANT_TRANSLATOR_PORT}/internal/orgIds
        - name: BYPASS_TENANT_TRANSLATION
          value: ${BYPASS_TENANT_TRANSLATION}
        - name: CLOWDER_ENABLED
          value: "true"
        - name: INVENTORY_DB_SCHEMA
          value: "${INVENTORY_DB_SCHEMA}"
        - name: INVENTORY_API_CACHE_TIMEOUT_SECONDS
          value: "${INVENTORY_API_CACHE_TIMEOUT_SECONDS}"
        - name: INVENTORY_API_CACHE_TYPE
          value: "${INVENTORY_API_CACHE_TYPE}"
        - name: INVENTORY_CACHE_INSIGHTS_CLIENT_SYSTEM_TIMEOUT_SEC
          value: "${INVENTORY_CACHE_INSIGHTS_CLIENT_SYSTEM_TIMEOUT_SEC}"
        - name: INVENTORY_CACHE_THREAD_POOL_MAX_WORKERS
          value: "${INVENTORY_CACHE_THREAD_POOL_MAX_WORKERS}"
        - name: KAFKA_CONSUMER_SESSION_TIMEOUT_MS
          value: "${KAFKA_CONSUMER_SESSION_TIMEOUT_MS}"
        - name: KAFKA_CONSUMER_HEARTBEAT_INTERVAL_MS
          value: "${KAFKA_CONSUMER_HEARTBEAT_INTERVAL_MS}"
        - name: UNLEASH_URL
          value: ${UNLEASH_URL}
        - name: UNLEASH_TOKEN
          valueFrom:
            secretKeyRef:
              name: ${UNLEASH_SECRET_NAME}
              key: CLIENT_ACCESS_TOKEN
              optional: true
        - name: BYPASS_UNLEASH
          value: ${BYPASS_UNLEASH}
        - name: UNLEASH_REFRESH_INTERVAL
          value: ${UNLEASH_REFRESH_INTERVAL}
        - name: MQ_DB_BATCH_MAX_MESSAGES
          value: ${MQ_DB_BATCH_MAX_MESSAGES}
        - name: MQ_DB_BATCH_MAX_SECONDS
          value: ${MQ_DB_BATCH_MAX_SECONDS}
        - name: RBAC_V2_FORCE_ORG_ADMIN
          value: ${RBAC_V2_FORCE_ORG_ADMIN}
        - name: RBAC_PSKS
          valueFrom:
            secretKeyRef:
              key: psks.json
              name: rbac-psks
              optional: false
        image: ${IMAGE}:${IMAGE_TAG}
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /
            port: 9000
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        readinessProbe:
          tcpSocket:
            port: 9000
        resources:
          limits:
            cpu: ${CPU_LIMIT_MQ_P1}
            memory: ${MEMORY_LIMIT_MQ_P1}
          requests:
            cpu: ${CPU_REQUEST_MQ_P1}
            memory: ${MEMORY_REQUEST_MQ_P1}
    - name: mq-sp
      replicas: ${{REPLICAS_SP}}
      podSpec:
        args: ["./inv_mq_service.py"]
        env:
        - name: CONSOLEDOT_HOSTNAME
          value: ${CONSOLEDOT_HOSTNAME}
        - name: INVENTORY_LOG_LEVEL
          value: ${LOG_LEVEL}
        - name: INVENTORY_DB_SSL_MODE
          value: ${INVENTORY_DB_SSL_MODE}
        - name: INVENTORY_DB_SSL_CERT
          value: ${INVENTORY_DB_SSL_CERT}
        - name: KAFKA_CONSUMER_TOPIC
          value: ${KAFKA_SYSTEM_PROFILE_TOPIC}
        - name: KAFKA_HOST_INGRESS_TOPIC
          value: ${KAFKA_HOST_INGRESS_TOPIC}
        - name: KAFKA_EVENT_TOPIC
          value: ${KAFKA_EVENT_TOPIC}
        - name: KAFKA_NOTIFICATION_TOPIC
          value: ${KAFKA_NOTIFICATION_TOPIC}
        - name: KAFKA_SYSTEM_PROFILE_TOPIC
          value: ${KAFKA_SYSTEM_PROFILE_TOPIC}
        - name: KAFKA_HOST_INGRESS_GROUP
          value: ${KAFKA_HOST_INGRESS_GROUP}
        - name: PAYLOAD_TRACKER_SERVICE_NAME
          value: inventory-mq-service
        - name: PAYLOAD_TRACKER_ENABLED
          value: 'true'
        - name: KAFKA_PRODUCER_ACKS
          value: ${KAFKA_PRODUCER_ACKS}
        - name: KAFKA_PRODUCER_RETRIES
          value: ${KAFKA_PRODUCER_RETRIES}
        - name: KAFKA_PRODUCER_RETRY_BACKOFF_MS
          value: ${KAFKA_PRODUCER_RETRY_BACKOFF_MS}
        - name: KAFKA_SECURITY_PROTOCOL
          value: ${KAFKA_SECURITY_PROTOCOL}
        - name: KAFKA_SASL_MECHANISM
          value: ${KAFKA_SASL_MECHANISM}
        - name: TENANT_TRANSLATOR_URL
          value: http://${TENANT_TRANSLATOR_HOST}:${TENANT_TRANSLATOR_PORT}/internal/orgIds
        - name: BYPASS_TENANT_TRANSLATION
          value: ${BYPASS_TENANT_TRANSLATION}
        - name: CLOWDER_ENABLED
          value: "true"
        - name: INVENTORY_DB_SCHEMA
          value: "${INVENTORY_DB_SCHEMA}"
        - name: INVENTORY_API_CACHE_TIMEOUT_SECONDS
          value: "${INVENTORY_API_CACHE_TIMEOUT_SECONDS}"
        - name: INVENTORY_API_CACHE_TYPE
          value: "${INVENTORY_API_CACHE_TYPE}"
        - name: INVENTORY_CACHE_INSIGHTS_CLIENT_SYSTEM_TIMEOUT_SEC
          value: "${INVENTORY_CACHE_INSIGHTS_CLIENT_SYSTEM_TIMEOUT_SEC}"
        - name: INVENTORY_CACHE_THREAD_POOL_MAX_WORKERS
          value: "${INVENTORY_CACHE_THREAD_POOL_MAX_WORKERS}"
        - name: UNLEASH_URL
          value: ${UNLEASH_URL}
        - name: UNLEASH_TOKEN
          valueFrom:
            secretKeyRef:
              name: ${UNLEASH_SECRET_NAME}
              key: CLIENT_ACCESS_TOKEN
              optional: true
        - name: BYPASS_UNLEASH
          value: ${BYPASS_UNLEASH}
        - name: UNLEASH_REFRESH_INTERVAL
          value: ${UNLEASH_REFRESH_INTERVAL}
        - name: MQ_DB_BATCH_MAX_MESSAGES
          value: ${MQ_DB_BATCH_MAX_MESSAGES}
        - name: MQ_DB_BATCH_MAX_SECONDS
          value: ${MQ_DB_BATCH_MAX_SECONDS}
        image: ${IMAGE}:${IMAGE_TAG}
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /
            port: 9000
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        readinessProbe:
          tcpSocket:
            port: 9000
        resources:
          limits:
            cpu: ${CPU_LIMIT_MQ_SP}
            memory: ${MEMORY_LIMIT_MQ_SP}
          requests:
            cpu: ${CPU_REQUEST_MQ_SP}
            memory: ${MEMORY_REQUEST_MQ_SP}
    - name: mq-workspaces
      replicas: ${{REPLICAS_P1}}
      podSpec:
        args: ["./inv_mq_service.py"]
        env:
        - name: CONSOLEDOT_HOSTNAME
          value: ${CONSOLEDOT_HOSTNAME}
        - name: INVENTORY_LOG_LEVEL
          value: ${LOG_LEVEL}
        - name: INVENTORY_DB_SSL_MODE
          value: ${INVENTORY_DB_SSL_MODE}
        - name: INVENTORY_DB_SSL_CERT
          value: ${INVENTORY_DB_SSL_CERT}
        - name: KAFKA_CONSUMER_TOPIC
          value: ${KAFKA_KESSEL_WORKSPACES_TOPIC}
        - name: KAFKA_WORKSPACES_TOPIC
          value: ${KAFKA_KESSEL_WORKSPACES_TOPIC}
        - name: KAFKA_EVENT_TOPIC
          value: ${KAFKA_EVENT_TOPIC}
        - name: KAFKA_NOTIFICATION_TOPIC
          value: ${KAFKA_NOTIFICATION_TOPIC}
        - name: KAFKA_SYSTEM_PROFILE_TOPIC
          value: ${KAFKA_SYSTEM_PROFILE_TOPIC}
        - name: KAFKA_HOST_INGRESS_GROUP
          value: ${KAFKA_HOST_INGRESS_GROUP}
        - name: KAFKA_PRODUCER_ACKS
          value: ${KAFKA_PRODUCER_ACKS}
        - name: KAFKA_PRODUCER_RETRIES
          value: ${KAFKA_PRODUCER_RETRIES}
        - name: KAFKA_PRODUCER_RETRY_BACKOFF_MS
          value: ${KAFKA_PRODUCER_RETRY_BACKOFF_MS}
        - name: KAFKA_SECURITY_PROTOCOL
          value: ${KAFKA_SECURITY_PROTOCOL}
        - name: KAFKA_SASL_MECHANISM
          value: ${KAFKA_SASL_MECHANISM}
        - name: CLOWDER_ENABLED
          value: "true"
        - name: INVENTORY_DB_SCHEMA
          value: "${INVENTORY_DB_SCHEMA}"
        - name: INVENTORY_API_CACHE_TIMEOUT_SECONDS
          value: "${INVENTORY_API_CACHE_TIMEOUT_SECONDS}"
        - name: INVENTORY_API_CACHE_TYPE
          value: "${INVENTORY_API_CACHE_TYPE}"
        - name: INVENTORY_CACHE_INSIGHTS_CLIENT_SYSTEM_TIMEOUT_SEC
          value: "${INVENTORY_CACHE_INSIGHTS_CLIENT_SYSTEM_TIMEOUT_SEC}"
        - name: INVENTORY_CACHE_THREAD_POOL_MAX_WORKERS
          value: "${INVENTORY_CACHE_THREAD_POOL_MAX_WORKERS}"
        - name: KAFKA_CONSUMER_SESSION_TIMEOUT_MS
          value: "${KAFKA_CONSUMER_SESSION_TIMEOUT_MS}"
        - name: KAFKA_CONSUMER_HEARTBEAT_INTERVAL_MS
          value: "${KAFKA_CONSUMER_HEARTBEAT_INTERVAL_MS}"
        - name: UNLEASH_URL
          value: ${UNLEASH_URL}
        - name: UNLEASH_TOKEN
          valueFrom:
            secretKeyRef:
              name: ${UNLEASH_SECRET_NAME}
              key: CLIENT_ACCESS_TOKEN
              optional: true
        - name: BYPASS_UNLEASH
          value: ${BYPASS_UNLEASH}
        - name: UNLEASH_REFRESH_INTERVAL
          value: ${UNLEASH_REFRESH_INTERVAL}
        - name: MQ_DB_BATCH_MAX_MESSAGES
          value: ${MQ_DB_BATCH_MAX_MESSAGES}
        - name: MQ_DB_BATCH_MAX_SECONDS
          value: ${MQ_DB_BATCH_MAX_SECONDS}
        - name: CONSUMER_MQ_BROKER
          value: ${CONSUMER_MQ_BROKER}
        - name: RBAC_V2_FORCE_ORG_ADMIN
          value: ${RBAC_V2_FORCE_ORG_ADMIN}
        - name: RBAC_PSKS
          valueFrom:
            secretKeyRef:
              key: psks.json
              name: rbac-psks
              optional: false
        image: ${IMAGE}:${IMAGE_TAG}
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /
            port: 9000
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        readinessProbe:
          tcpSocket:
            port: 9000
        resources:
          limits:
            cpu: ${CPU_LIMIT_WORKSPACES_MQ}
            memory: ${MEMORY_LIMIT_WORKSPACES_MQ}
          requests:
            cpu: ${CPU_REQUEST_WORKSPACES_MQ}
            memory: ${MEMORY_REQUEST_WORKSPACES_MQ}
    - name: export-service
      minReplicas: ${{REPLICAS_EXPORT_SVC}}
      podSpec:
        args: ["./inv_export_service.py"]
        env:
        - name: INVENTORY_LOG_LEVEL
          value: DEBUG
        - name: INVENTORY_DB_SSL_MODE
          value: ${INVENTORY_DB_SSL_MODE}
        - name: INVENTORY_DB_SSL_CERT
          value: ${INVENTORY_DB_SSL_CERT}
        - name: KAFKA_EXPORT_SERVICE_TOPIC
          value: ${KAFKA_EXPORT_SERVICE_TOPIC}
        - name: KAFKA_SECURITY_PROTOCOL
          value: ${KAFKA_SECURITY_PROTOCOL}
        - name: KAFKA_SASL_MECHANISM
          value: ${KAFKA_SASL_MECHANISM}
        - name: TENANT_TRANSLATOR_URL
          value: http://${TENANT_TRANSLATOR_HOST}:${TENANT_TRANSLATOR_PORT}/internal/orgIds
        - name: BYPASS_TENANT_TRANSLATION
          value: ${BYPASS_TENANT_TRANSLATION}
        - name: CLOWDER_ENABLED
          value: "true"
        - name: INVENTORY_DB_SCHEMA
          value: "${INVENTORY_DB_SCHEMA}"
        - name: UNLEASH_URL
          value: ${UNLEASH_URL}
        - name: UNLEASH_TOKEN
          valueFrom:
            secretKeyRef:
              name: ${UNLEASH_SECRET_NAME}
              key: CLIENT_ACCESS_TOKEN
              optional: true
        - name: EXPORT_SERVICE_TOKEN
          valueFrom:
            secretKeyRef:
              name: export-service-psk
              key: psk
              optional: true
        - name: BYPASS_UNLEASH
          value: ${BYPASS_UNLEASH}
        - name: UNLEASH_REFRESH_INTERVAL
          value: ${UNLEASH_REFRESH_INTERVAL}
        image: ${IMAGE}:${IMAGE_TAG}
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /
            port: 9000
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        readinessProbe:
          tcpSocket:
            port: 9000
        resources:
          limits:
            cpu: ${CPU_LIMIT_EXPORT_SVC}
            memory: ${MEMORY_LIMIT_EXPORT_SVC}
          requests:
            cpu: ${CPU_REQUEST_EXPORT_SVC}
            memory: ${MEMORY_REQUEST_EXPORT_SVC}

    jobs:
    - name: reaper
      schedule: '@hourly'
      concurrencyPolicy: "Forbid"
      suspend: ${{REAPER_SUSPEND}}
      restartPolicy: Never
      podSpec:
        image: ${IMAGE}:${IMAGE_TAG}
        args: ["./host_reaper.py"]
        env:
          - name: INVENTORY_LOG_LEVEL
            value: ${LOG_LEVEL}
          - name: INVENTORY_DB_SSL_MODE
            value: ${INVENTORY_DB_SSL_MODE}
          - name: INVENTORY_DB_SSL_CERT
            value: ${INVENTORY_DB_SSL_CERT}
          - name: KAFKA_BOOTSTRAP_SERVERS
            value: ${KAFKA_BOOTSTRAP_HOST}:${KAFKA_BOOTSTRAP_PORT}
          - name: KESSEL_TARGET_URL
            value: ${KESSEL_TARGET_URL}
          - name: PAYLOAD_TRACKER_KAFKA_TOPIC
            value: ${PAYLOAD_TRACKER_KAFKA_TOPIC}
          - name: PAYLOAD_TRACKER_SERVICE_NAME
            value: inventory-mq-service
          - name: PAYLOAD_TRACKER_ENABLED
            value: 'true'
          - name: PROMETHEUS_PUSHGATEWAY
            value: ${PROMETHEUS_PUSHGATEWAY}
          - name: KAFKA_EVENT_TOPIC
            value: ${KAFKA_EVENT_TOPIC}
          - name: KAFKA_NOTIFICATION_TOPIC
            value: ${KAFKA_NOTIFICATION_TOPIC}
          - name: KAFKA_PRODUCER_ACKS
            value: ${KAFKA_PRODUCER_ACKS}
          - name: KAFKA_PRODUCER_RETRIES
            value: ${KAFKA_PRODUCER_RETRIES}
          - name: KAFKA_PRODUCER_RETRY_BACKOFF_MS
            value: ${KAFKA_PRODUCER_RETRY_BACKOFF_MS}
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KAFKA_SECURITY_PROTOCOL
            value: ${KAFKA_SECURITY_PROTOCOL}
          - name: KAFKA_SASL_MECHANISM
            value: ${KAFKA_SASL_MECHANISM}
          - name: CLOWDER_ENABLED
            value: "true"
          - name: INVENTORY_DB_SCHEMA
            value: "${INVENTORY_DB_SCHEMA}"
          - name: INVENTORY_API_CACHE_TIMEOUT_SECONDS
            value: "${INVENTORY_API_CACHE_TIMEOUT_SECONDS}"
          - name: INVENTORY_API_CACHE_TYPE
            value: "${INVENTORY_API_CACHE_TYPE}"
          - name: INVENTORY_CACHE_INSIGHTS_CLIENT_SYSTEM_TIMEOUT_SEC
            value: "${INVENTORY_CACHE_INSIGHTS_CLIENT_SYSTEM_TIMEOUT_SEC}"
          - name: INVENTORY_CACHE_THREAD_POOL_MAX_WORKERS
            value: "${INVENTORY_CACHE_THREAD_POOL_MAX_WORKERS}"
          - name: UNLEASH_URL
            value: ${UNLEASH_URL}
          - name: UNLEASH_TOKEN
            valueFrom:
              secretKeyRef:
                name: ${UNLEASH_SECRET_NAME}
                key: CLIENT_ACCESS_TOKEN
                optional: true
          - name: BYPASS_UNLEASH
            value: ${BYPASS_UNLEASH}
          - name: UNLEASH_REFRESH_INTERVAL
            value: ${UNLEASH_REFRESH_INTERVAL}
          - name: RBAC_PSKS
            valueFrom:
              secretKeyRef:
                key: psks.json
                name: rbac-psks
                optional: false
        resources:
          limits:
            cpu: ${CPU_LIMIT_REAPER}
            memory: ${MEMORY_LIMIT_REAPER}
          requests:
            cpu: ${CPU_REQUEST_REAPER}
            memory: ${MEMORY_REQUEST_REAPER}
    - name: stale-host-notification
      schedule: ${STALE_HOST_NOTIFICATION_SCHEDULE}
      concurrencyPolicy: "Forbid"
      suspend: ${{STALE_HOST_NOTIFICATION_SUSPEND}}
      restartPolicy: Never
      podSpec:
        image: ${IMAGE}:${IMAGE_TAG}
        args: ["./generate_stale_host_notifications.py"]
        env:
          - name: INVENTORY_LOG_LEVEL
            value: ${LOG_LEVEL}
          - name: INVENTORY_DB_SSL_MODE
            value: ${INVENTORY_DB_SSL_MODE}
          - name: INVENTORY_DB_SSL_CERT
            value: ${INVENTORY_DB_SSL_CERT}
          - name: KAFKA_BOOTSTRAP_SERVERS
            value: ${KAFKA_BOOTSTRAP_HOST}:${KAFKA_BOOTSTRAP_PORT}
          - name: KESSEL_TARGET_URL
            value: ${KESSEL_TARGET_URL}
          - name: PROMETHEUS_PUSHGATEWAY
            value: ${PROMETHEUS_PUSHGATEWAY}
          - name: KAFKA_EVENT_TOPIC
            value: ${KAFKA_EVENT_TOPIC}
          - name: KAFKA_NOTIFICATION_TOPIC
            value: ${KAFKA_NOTIFICATION_TOPIC}
          - name: KAFKA_PRODUCER_ACKS
            value: ${KAFKA_PRODUCER_ACKS}
          - name: KAFKA_PRODUCER_RETRIES
            value: ${KAFKA_PRODUCER_RETRIES}
          - name: KAFKA_PRODUCER_RETRY_BACKOFF_MS
            value: ${KAFKA_PRODUCER_RETRY_BACKOFF_MS}
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KAFKA_SECURITY_PROTOCOL
            value: ${KAFKA_SECURITY_PROTOCOL}
          - name: KAFKA_SASL_MECHANISM
            value: ${KAFKA_SASL_MECHANISM}
          - name: CLOWDER_ENABLED
            value: "true"
          - name: INVENTORY_DB_SCHEMA
            value: "${INVENTORY_DB_SCHEMA}"
          - name: UNLEASH_URL
            value: ${UNLEASH_URL}
          - name: UNLEASH_TOKEN
            valueFrom:
              secretKeyRef:
                name: ${UNLEASH_SECRET_NAME}
                key: CLIENT_ACCESS_TOKEN
                optional: true
          - name: BYPASS_UNLEASH
            value: ${BYPASS_UNLEASH}
          - name: UNLEASH_REFRESH_INTERVAL
            value: ${UNLEASH_REFRESH_INTERVAL}
          - name: CONSOLEDOT_HOSTNAME
            value: ${CONSOLEDOT_HOSTNAME}
        resources:
          limits:
            cpu: ${CPU_LIMIT_STALE_HOST_NOTIFICAION}
            memory: ${MEMORY_LIMIT_STALE_HOST_NOTIFICAION}
          requests:
            cpu: ${CPU_REQUEST_STALE_HOST_NOTIFICAION}
            memory: ${MEMORY_REQUEST_STALE_HOST_NOTIFICAION}
    - name: syndicator
      schedule: ${SYNDICATOR_CRON_SCHEDULE}
      concurrencyPolicy: "Forbid"
      suspend: ${{SYNDICATOR_SUSPEND}}
      restartPolicy: Never
      podSpec:
        image: ${IMAGE}:${IMAGE_TAG}
        args: ["./inv_publish_hosts.py"]
        env:
          - name: INVENTORY_LOG_LEVEL
            value: ${LOG_LEVEL}
          - name: INVENTORY_DB_SSL_MODE
            value: ${INVENTORY_DB_SSL_MODE}
          - name: INVENTORY_DB_SSL_CERT
            value: ${INVENTORY_DB_SSL_CERT}
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: CLOWDER_ENABLED
            value: "true"
          - name: INVENTORY_DB_SCHEMA
            value: "${INVENTORY_DB_SCHEMA}"
          - name: PROMETHEUS_PUSHGATEWAY
            value: ${PROMETHEUS_PUSHGATEWAY}
        resources:
          limits:
            cpu: ${CPU_LIMIT_SYNDICATOR}
            memory: ${MEMORY_LIMIT_SYNDICATOR}
          requests:
            cpu: ${CPU_REQUEST_SYNDICATOR}
            memory: ${MEMORY_REQUEST_SYNDICATOR}

    - name: sp-validator
      schedule: '@hourly'
      suspend: ${{SP_VALIDATOR_SUSPEND}}
      restartPolicy: Never
      podSpec:
        image: ${IMAGE}:${IMAGE_TAG}
        args: ["./system_profile_validator.py"]
        env:
          - name: INVENTORY_LOG_LEVEL
            value: ${LOG_LEVEL}
          - name: GIT_TOKEN
            valueFrom:
              secretKeyRef:
                key: token
                name: dippy-bot
          - name: GIT_USER
            valueFrom:
              secretKeyRef:
                key: user
                name: dippy-bot
          - name: INVENTORY_DB_SSL_MODE
            value: ${INVENTORY_DB_SSL_MODE}
          - name: INVENTORY_DB_SSL_CERT
            value: ${INVENTORY_DB_SSL_CERT}
          - name: KAFKA_BOOTSTRAP_SERVERS
            value: ${KAFKA_BOOTSTRAP_HOST}:${KAFKA_BOOTSTRAP_PORT}
          - name: KESSEL_TARGET_URL
            value: ${KESSEL_TARGET_URL}
          - name: PAYLOAD_TRACKER_KAFKA_TOPIC
            value: ${PAYLOAD_TRACKER_KAFKA_TOPIC}
          - name: PAYLOAD_TRACKER_SERVICE_NAME
            value: inventory-mq-service
          - name: PAYLOAD_TRACKER_ENABLED
            value: 'true'
          - name: PROMETHEUS_PUSHGATEWAY
            value: ${PROMETHEUS_PUSHGATEWAY}
          - name: KAFKA_PRODUCER_ACKS
            value: ${KAFKA_PRODUCER_ACKS}
          - name: KAFKA_PRODUCER_RETRIES
            value: ${KAFKA_PRODUCER_RETRIES}
          - name: KAFKA_PRODUCER_RETRY_BACKOFF_MS
            value: ${KAFKA_PRODUCER_RETRY_BACKOFF_MS}
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KAFKA_CONSUMER_TOPIC
            value: ${KAFKA_HOST_INGRESS_TOPIC}
          - name: KAFKA_HOST_INGRESS_TOPIC
            value: ${KAFKA_HOST_INGRESS_TOPIC}
          - name: KAFKA_EVENT_TOPIC
            value: ${KAFKA_EVENT_TOPIC}
          - name: KAFKA_NOTIFICATION_TOPIC
            value: ${KAFKA_NOTIFICATION_TOPIC}
          - name: KAFKA_SYSTEM_PROFILE_TOPIC
            value: ${KAFKA_SYSTEM_PROFILE_TOPIC}
          - name: KAFKA_ADDITIONAL_VALIDATION_TOPIC
            value: ${KAFKA_ADDITIONAL_VALIDATION_TOPIC}
          - name: KAFKA_SP_VALIDATOR_MAX_MESSAGES
            value: ${KAFKA_SP_VALIDATOR_MAX_MESSAGES}
          - name: KAFKA_SECURITY_PROTOCOL
            value: ${KAFKA_SECURITY_PROTOCOL}
          - name: KAFKA_SASL_MECHANISM
            value: ${KAFKA_SASL_MECHANISM}
          - name: CLOWDER_ENABLED
            value: "true"
          - name: INVENTORY_DB_SCHEMA
            value: "${INVENTORY_DB_SCHEMA}"
          - name: UNLEASH_URL
            value: ${UNLEASH_URL}
          - name: UNLEASH_TOKEN
            valueFrom:
              secretKeyRef:
                name: ${UNLEASH_SECRET_NAME}
                key: CLIENT_ACCESS_TOKEN
                optional: true
          - name: BYPASS_UNLEASH
            value: ${BYPASS_UNLEASH}
          - name: UNLEASH_REFRESH_INTERVAL
            value: ${UNLEASH_REFRESH_INTERVAL}
        resources:
          limits:
            cpu: ${CPU_LIMIT_SP_VALIDATOR}
            memory: ${MEMORY_LIMIT_SP_VALIDATOR}
          requests:
            cpu: ${CPU_REQUEST_SP_VALIDATOR}
            memory: ${MEMORY_REQUEST_SP_VALIDATOR}
    - name: pendo-syncher
      schedule: ${PENDO_CRON_SCHEDULE}
      suspend: ${{PENDO_SYNCHER_SUSPEND}}
      restartPolicy: Never
      podSpec:
        image: ${IMAGE}:${IMAGE_TAG}
        args: ["./pendo_syncher.py"]
        env:
          - name: INVENTORY_LOG_LEVEL
            value: ${LOG_LEVEL}
          - name: INVENTORY_DB_SSL_MODE
            value: ${INVENTORY_DB_SSL_MODE}
          - name: INVENTORY_DB_SSL_CERT
            value: ${INVENTORY_DB_SSL_CERT}
          - name: INVENTORY_DB_SCHEMA
            value: "${INVENTORY_DB_SCHEMA}"
          - name: PROMETHEUS_PUSHGATEWAY
            value: ${PROMETHEUS_PUSHGATEWAY}
          - name: PENDO_SYNC_ACTIVE
            value: ${PENDO_SYNC_ACTIVE}
          - name: PENDO_INTEGRATION_KEY
            valueFrom:
              secretKeyRef:
                key: apikey
                name: pendo-creds
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: CLOWDER_ENABLED
            value: "true"
          - name: UNLEASH_URL
            value: ${UNLEASH_URL}
          - name: UNLEASH_TOKEN
            valueFrom:
              secretKeyRef:
                name: ${UNLEASH_SECRET_NAME}
                key: CLIENT_ACCESS_TOKEN
                optional: true
          - name: BYPASS_UNLEASH
            value: ${BYPASS_UNLEASH}
          - name: UNLEASH_REFRESH_INTERVAL
            value: ${UNLEASH_REFRESH_INTERVAL}
        resources:
          limits:
            cpu: ${CPU_LIMIT_PENDO_SYNCHER}
            memory: ${MEMORY_LIMIT_PENDO_SYNCHER}
          requests:
            cpu: ${CPU_REQUEST_PENDO_SYNCHER}
            memory: ${MEMORY_REQUEST_PENDO_SYNCHER}
    - name: synchronizer
      restartPolicy: OnFailure
      podSpec:
        image: ${IMAGE}:${IMAGE_TAG}
        args: ["./rebuild_events_topic.py", "&&", "./host_synchronizer.py"]
        env:
          - name: INVENTORY_LOG_LEVEL
            value: ${LOG_LEVEL}
          - name: INVENTORY_DB_SSL_MODE
            value: ${INVENTORY_DB_SSL_MODE}
          - name: INVENTORY_DB_SSL_CERT
            value: ${INVENTORY_DB_SSL_CERT}
          - name: INVENTORY_DB_SCHEMA
            value: "${INVENTORY_DB_SCHEMA}"
          - name: KAFKA_BOOTSTRAP_SERVERS
            value: ${KAFKA_BOOTSTRAP_HOST}:${KAFKA_BOOTSTRAP_PORT}
          - name: KAFKA_EVENT_TOPIC
            value: ${KAFKA_EVENT_TOPIC}
          - name: KAFKA_NOTIFICATION_TOPIC
            value: ${KAFKA_NOTIFICATION_TOPIC}
          - name: KESSEL_TARGET_URL
            value: ${KESSEL_TARGET_URL}
          - name: PAYLOAD_TRACKER_KAFKA_TOPIC
            value: ${PAYLOAD_TRACKER_KAFKA_TOPIC}
          - name: PAYLOAD_TRACKER_SERVICE_NAME
            value: inventory-mq-service
          - name: PAYLOAD_TRACKER_ENABLED
            value: 'true'
          - name: PROMETHEUS_PUSHGATEWAY
            value: ${PROMETHEUS_PUSHGATEWAY}
          - name: KAFKA_PRODUCER_ACKS
            value: ${KAFKA_PRODUCER_ACKS}
          - name: KAFKA_PRODUCER_RETRIES
            value: ${KAFKA_PRODUCER_RETRIES}
          - name: KAFKA_PRODUCER_RETRY_BACKOFF_MS
            value: ${KAFKA_PRODUCER_RETRY_BACKOFF_MS}
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KAFKA_SECURITY_PROTOCOL
            value: ${KAFKA_SECURITY_PROTOCOL}
          - name: KAFKA_SASL_MECHANISM
            value: ${KAFKA_SASL_MECHANISM}
          - name: CLOWDER_ENABLED
            value: "true"
          - name: SCRIPT_CHUNK_SIZE
            value: ${SCRIPT_CHUNK_SIZE}
          - name: UNLEASH_URL
            value: ${UNLEASH_URL}
          - name: UNLEASH_TOKEN
            valueFrom:
              secretKeyRef:
                name: ${UNLEASH_SECRET_NAME}
                key: CLIENT_ACCESS_TOKEN
                optional: true
          - name: BYPASS_UNLEASH
            value: ${BYPASS_UNLEASH}
          - name: UNLEASH_REFRESH_INTERVAL
            value: ${UNLEASH_REFRESH_INTERVAL}
          - name: REBUILD_EVENTS_TIME_LIMIT
            value: ${REBUILD_EVENTS_TIME_LIMIT}
        resources:
          limits:
            cpu: ${CPU_LIMIT_SYNCHRONIZER}
            memory: ${MEMORY_LIMIT_SYNCHRONIZER}
          requests:
            cpu: ${CPU_REQUEST_SYNCHRONIZER}
            memory: ${MEMORY_REQUEST_SYNCHRONIZER}
    - name: create-ungrouped-host-groups
      restartPolicy: OnFailure
      podSpec:
        image: ${IMAGE}:${IMAGE_TAG}
        args: ["./create_ungrouped_host_groups.py"]
        env:
          - name: INVENTORY_LOG_LEVEL
            value: ${LOG_LEVEL}
          - name: INVENTORY_DB_SSL_MODE
            value: ${INVENTORY_DB_SSL_MODE}
          - name: INVENTORY_DB_SSL_CERT
            value: ${INVENTORY_DB_SSL_CERT}
          - name: INVENTORY_DB_SCHEMA
            value: "${INVENTORY_DB_SCHEMA}"
          - name: PROMETHEUS_PUSHGATEWAY
            value: ${PROMETHEUS_PUSHGATEWAY}
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: CLOWDER_ENABLED
            value: "true"
          - name: UNLEASH_URL
            value: ${UNLEASH_URL}
          - name: UNLEASH_TOKEN
            valueFrom:
              secretKeyRef:
                name: ${UNLEASH_SECRET_NAME}
                key: CLIENT_ACCESS_TOKEN
                optional: true
          - name: BYPASS_UNLEASH
            value: ${BYPASS_UNLEASH}
          - name: UNLEASH_REFRESH_INTERVAL
            value: ${UNLEASH_REFRESH_INTERVAL}
        resources:
          limits:
            cpu: ${CPU_LIMIT_UNGROUPED_HOSTS_JOB}
            memory: ${MEMORY_LIMIT_UNGROUPED_HOSTS_JOB}
          requests:
            cpu: ${CPU_REQUEST_UNGROUPED_HOSTS_JOB}
            memory: ${MEMORY_REQUEST_UNGROUPED_HOSTS_JOB}
    - name: delete-ungrouped-host-groups
      restartPolicy: OnFailure
      podSpec:
        image: ${IMAGE}:${IMAGE_TAG}
        args: ["./delete_ungrouped_host_groups.py"]
        env:
          - name: INVENTORY_LOG_LEVEL
            value: ${LOG_LEVEL}
          - name: INVENTORY_DB_SSL_MODE
            value: ${INVENTORY_DB_SSL_MODE}
          - name: INVENTORY_DB_SSL_CERT
            value: ${INVENTORY_DB_SSL_CERT}
          - name: INVENTORY_DB_SCHEMA
            value: "${INVENTORY_DB_SCHEMA}"
          - name: KAFKA_BOOTSTRAP_SERVERS
            value: ${KAFKA_BOOTSTRAP_HOST}:${KAFKA_BOOTSTRAP_PORT}
          - name: KESSEL_TARGET_URL
            value: ${KESSEL_TARGET_URL}
          - name: KAFKA_EVENT_TOPIC
            value: ${KAFKA_EVENT_TOPIC}
          - name: KAFKA_NOTIFICATION_TOPIC
            value: ${KAFKA_NOTIFICATION_TOPIC}
          - name: PAYLOAD_TRACKER_KAFKA_TOPIC
            value: ${PAYLOAD_TRACKER_KAFKA_TOPIC}
          - name: PAYLOAD_TRACKER_SERVICE_NAME
            value: inventory-mq-service
          - name: PAYLOAD_TRACKER_ENABLED
            value: 'true'
          - name: PROMETHEUS_PUSHGATEWAY
            value: ${PROMETHEUS_PUSHGATEWAY}
          - name: KAFKA_PRODUCER_ACKS
            value: ${KAFKA_PRODUCER_ACKS}
          - name: KAFKA_PRODUCER_RETRIES
            value: ${KAFKA_PRODUCER_RETRIES}
          - name: KAFKA_PRODUCER_RETRY_BACKOFF_MS
            value: ${KAFKA_PRODUCER_RETRY_BACKOFF_MS}
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KAFKA_SECURITY_PROTOCOL
            value: ${KAFKA_SECURITY_PROTOCOL}
          - name: KAFKA_SASL_MECHANISM
            value: ${KAFKA_SASL_MECHANISM}
          - name: CLOWDER_ENABLED
            value: "true"
          - name: UNLEASH_URL
            value: ${UNLEASH_URL}
          - name: UNLEASH_TOKEN
            valueFrom:
              secretKeyRef:
                name: ${UNLEASH_SECRET_NAME}
                key: CLIENT_ACCESS_TOKEN
                optional: true
          - name: BYPASS_UNLEASH
            value: ${BYPASS_UNLEASH}
          - name: UNLEASH_REFRESH_INTERVAL
            value: ${UNLEASH_REFRESH_INTERVAL}
        resources:
          limits:
            cpu: ${CPU_LIMIT_UNGROUPED_HOSTS_JOB}
            memory: ${MEMORY_LIMIT_UNGROUPED_HOSTS_JOB}
          requests:
            cpu: ${CPU_REQUEST_UNGROUPED_HOSTS_JOB}
            memory: ${MEMORY_REQUEST_UNGROUPED_HOSTS_JOB}
    - name: export-group-data-s3
      restartPolicy: OnFailure
      podSpec:
        image: ${IMAGE}:${IMAGE_TAG}
        args: ["./export_group_data_s3.py"]
        env:
          - name: INVENTORY_LOG_LEVEL
            value: ${LOG_LEVEL}
          - name: INVENTORY_DB_SSL_MODE
            value: ${INVENTORY_DB_SSL_MODE}
          - name: INVENTORY_DB_SSL_CERT
            value: ${INVENTORY_DB_SSL_CERT}
          - name: INVENTORY_DB_SCHEMA
            value: "${INVENTORY_DB_SCHEMA}"
          - name: PROMETHEUS_PUSHGATEWAY
            value: ${PROMETHEUS_PUSHGATEWAY}
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: CLOWDER_ENABLED
            value: "true"
          - name: S3_AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ${S3_AWS_SECRET}
                key: aws_access_key_id
          - name: S3_AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ${S3_AWS_SECRET}
                key: aws_secret_access_key
          - name: S3_AWS_BUCKET
            valueFrom:
              secretKeyRef:
                name: ${S3_AWS_SECRET}
                key: bucket
        resources:
          limits:
            cpu: ${CPU_LIMIT_GROUPS_S3_EXPORT}
            memory: ${MEMORY_LIMIT_GROUPS_S3_EXPORT}
          requests:
            cpu: ${CPU_REQUEST_GROUPS_S3_EXPORT}
            memory: ${MEMORY_REQUEST_GROUPS_S3_EXPORT}
    - name: assign-ungrouped-host-groups
      restartPolicy: OnFailure
      podSpec:
        image: ${IMAGE}:${IMAGE_TAG}
        args: ["./assign_ungrouped_hosts_to_groups.py"]
        env:
          - name: INVENTORY_LOG_LEVEL
            value: ${LOG_LEVEL}
          - name: INVENTORY_DB_SSL_MODE
            value: ${INVENTORY_DB_SSL_MODE}
          - name: INVENTORY_DB_SSL_CERT
            value: ${INVENTORY_DB_SSL_CERT}
          - name: INVENTORY_DB_SCHEMA
            value: "${INVENTORY_DB_SCHEMA}"
          - name: KAFKA_BOOTSTRAP_SERVERS
            value: ${KAFKA_BOOTSTRAP_HOST}:${KAFKA_BOOTSTRAP_PORT}
          - name: KAFKA_EVENT_TOPIC
            value: ${KAFKA_EVENT_TOPIC}
          - name: KAFKA_NOTIFICATION_TOPIC
            value: ${KAFKA_NOTIFICATION_TOPIC}
          - name: KESSEL_TARGET_URL
            value: ${KESSEL_TARGET_URL}
          - name: PAYLOAD_TRACKER_KAFKA_TOPIC
            value: ${PAYLOAD_TRACKER_KAFKA_TOPIC}
          - name: PAYLOAD_TRACKER_SERVICE_NAME
            value: inventory-mq-service
          - name: PAYLOAD_TRACKER_ENABLED
            value: 'true'
          - name: PROMETHEUS_PUSHGATEWAY
            value: ${PROMETHEUS_PUSHGATEWAY}
          - name: KAFKA_PRODUCER_ACKS
            value: ${KAFKA_PRODUCER_ACKS}
          - name: KAFKA_PRODUCER_RETRIES
            value: ${KAFKA_PRODUCER_RETRIES}
          - name: KAFKA_PRODUCER_RETRY_BACKOFF_MS
            value: ${KAFKA_PRODUCER_RETRY_BACKOFF_MS}
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KAFKA_SECURITY_PROTOCOL
            value: ${KAFKA_SECURITY_PROTOCOL}
          - name: KAFKA_SASL_MECHANISM
            value: ${KAFKA_SASL_MECHANISM}
          - name: CLOWDER_ENABLED
            value: "true"
          - name: UNLEASH_URL
            value: ${UNLEASH_URL}
          - name: UNLEASH_TOKEN
            valueFrom:
              secretKeyRef:
                name: ${UNLEASH_SECRET_NAME}
                key: CLIENT_ACCESS_TOKEN
                optional: true
          - name: BYPASS_UNLEASH
            value: ${BYPASS_UNLEASH}
          - name: UNLEASH_REFRESH_INTERVAL
            value: ${UNLEASH_REFRESH_INTERVAL}
        resources:
          limits:
            cpu: ${CPU_LIMIT_UNGROUPED_HOSTS_JOB}
            memory: ${MEMORY_LIMIT_UNGROUPED_HOSTS_JOB}
          requests:
            cpu: ${CPU_REQUEST_UNGROUPED_HOSTS_JOB}
            memory: ${MEMORY_REQUEST_UNGROUPED_HOSTS_JOB}
    - name: update-hosts-last-check-in
      schedule: ${{HOSTS_LAST_CHECK_IN_SCHEDULE}}
      restartPolicy: Never
      suspend: ${{HOSTS_LAST_CHECK_IN_SUSPEND}}
      podSpec:
        image: ${IMAGE}:${IMAGE_TAG}
        args: ["./update_hosts_last_check_in.py"]
        env:
          - name: PYTHONPATH
            value: '/opt/app-root/src'
          - name: HOST_UPDATE_LIMIT
            value: ${HOST_UPDATE_LIMIT}
          - name: INVENTORY_LOG_LEVEL
            value: ${LOG_LEVEL}
          - name: INVENTORY_DB_SSL_MODE
            value: ${INVENTORY_DB_SSL_MODE}
          - name: INVENTORY_DB_SSL_CERT
            value: ${INVENTORY_DB_SSL_CERT}
          - name: INVENTORY_DB_SCHEMA
            value: "${INVENTORY_DB_SCHEMA}"
          - name: PROMETHEUS_PUSHGATEWAY
            value: ${PROMETHEUS_PUSHGATEWAY}
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: CLOWDER_ENABLED
            value: "true"
        resources:
          limits:
            cpu: ${CPU_LIMIT_HOSTS_LAST_CHECK_IN}
            memory: ${MEMORY_LIMIT_HOSTS_LAST_CHECK_IN}
          requests:
            cpu: ${CPU_REQUEST_HOSTS_LAST_CHECK_IN}
            memory: ${MEMORY_REQUEST_HOSTS_LAST_CHECK_IN}
    - name: update-edge-hosts-prs
      schedule: ${{EDGE_HOSTS_PRS_SCHEDULE}}
      restartPolicy: Never
      suspend: ${{EDGE_HOSTS_PRS_SUSPEND}}
      podSpec:
        image: ${IMAGE}:${IMAGE_TAG}
        args: ["./update_edge_hosts_prs.py"]
        env:
          - name: INVENTORY_LOG_LEVEL
            value: ${LOG_LEVEL}
          - name: INVENTORY_DB_SSL_MODE
            value: ${INVENTORY_DB_SSL_MODE}
          - name: INVENTORY_DB_SSL_CERT
            value: ${INVENTORY_DB_SSL_CERT}
          - name: INVENTORY_DB_SCHEMA
            value: "${INVENTORY_DB_SCHEMA}"
          - name: PROMETHEUS_PUSHGATEWAY
            value: ${PROMETHEUS_PUSHGATEWAY}
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: CLOWDER_ENABLED
            value: "true"
        resources:
          limits:
            cpu: ${CPU_LIMIT_EDGE_HOSTS_PRS}
            memory: ${MEMORY_LIMIT_EDGE_HOSTS_PRS}
          requests:
            cpu: ${CPU_REQUEST_EDGE_HOSTS_PRS}
            memory: ${MEMORY_REQUEST_EDGE_HOSTS_PRS}
    database:
      name: ${DB_NAME}
      version: 16
    kafkaTopics: # The number of Kafka partitions variables provided are the Ephemeral environments.
      - topicName: ${KAFKA_SYSTEM_PROFILE_TOPIC}
        partitions: ${{NUMBER_OF_KAFKA_SYSTEM_PROFILE_TOPIC_PARTITIONS}}
      - topicName: ${PAYLOAD_TRACKER_KAFKA_TOPIC}
        partitions: ${{NUMBER_OF_PAYLOAD_TRACKER_KAFKA_TOPIC_PARTITIONS}}
      - topicName: ${KAFKA_EVENT_TOPIC}
        partitions: ${{NUMBER_OF_KAFKA_EVENT_TOPIC_PARTITIONS}}
      - topicName: ${KAFKA_NOTIFICATION_TOPIC}
        partitions: ${{NUMBER_OF_KAFKA_NOTIFICATION_TOPIC_PARTITIONS}}
      - topicName: ${KAFKA_HOST_INGRESS_TOPIC}
        partitions: ${{NUMBER_OF_KAFKA_HOST_INGRESS_TOPIC_PARTITIONS}}
      - topicName: ${KAFKA_HOST_INGRESS_P1_TOPIC}
        partitions: ${{NUMBER_OF_KAFKA_HOST_INGRESS_P1_TOPIC_PARTITIONS}}
      - topicName: ${KAFKA_EXPORT_SERVICE_TOPIC}
        partitions: ${{NUMBER_OF_KAFKA_EXPORT_SERVICE_TOPIC_PARTITIONS}}
      - topicName: ${KAFKA_KESSEL_WORKSPACES_TOPIC}
        partitions: ${{NUMBER_OF_KAFKA_KESSEL_WORKSPACES_TOPIC_PARTITIONS}}
# this service proxies requests for the old URL (insights-inventory:8080) to the clowderized service (host-inventory-service:8000)
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: insights-inventory
    name: insights-inventory
  spec:
    ports:
    - name: port-8080
      port: 8080
      protocol: TCP
      targetPort: 8000
    selector:
      pod: host-inventory-service
- apiVersion: metrics.console.redhat.com/v1alpha1
  kind: FloorPlan
  metadata:
    name: host-inventory
  spec:
    database:
      secretName: ${FLOORIST_DB_SECRET_NAME}
    objectStore:
      secretName: ${FLOORIST_BUCKET_SECRET_NAME}
    suspend: ${{FLOORIST_SUSPEND}}
    logLevel: ${FLOORIST_LOGLEVEL}
    queries:
      - prefix: insights/inventory/hosts
        chunksize: 50000
        query: >-
          SELECT
            "id",
            "account" AS "account_number",
            "created_on" AS "created_at",
            "modified_on" AS "updated_at",
            "ansible_host" AS "ansible_host",
            CONCAT_WS('.',"system_profile_facts"->'operating_system'->>'name',"system_profile_facts"->'operating_system'->'major',"system_profile_facts"->'operating_system'->'minor') AS "os_version",
            "system_profile_facts"->'host_type' AS "host_type",
            "system_profile_facts"->'ansible'->'controller_version' AS "ansible_controller_version",
            "system_profile_facts"->'ansible'->'hub_version' AS "ansible_hub_version",
            "system_profile_facts"->'rhsm'->'version' AS "rhsm_version",
            "system_profile_facts"->'is_marketplace' AS "is_marketplace_installation",
            "system_profile_facts"->'insights_client_version' AS "insights_client_version",
            "system_profile_facts"->'insights_egg_version' AS "insights_egg_version",
            "system_profile_facts"->'satellite_managed' AS "is_satellite_managed",
            "system_profile_facts"->'subscription_status' AS "subscription_status",
            "system_profile_facts"->'ansible' AS "ansible_workload",
            "system_profile_facts"->'mssql' AS "mssql_workload",
            "system_profile_facts"->'sap' AS "sap_workload",
            "system_profile_facts"->'rhc_client_id' AS "rhc_client_id"
          FROM "hbi"."hosts"
- apiVersion: metrics.console.redhat.com/v1alpha1
  kind: FloorPlan
  metadata:
    name: host-inventory-hms
  spec:
    database:
      secretName: ${FLOORIST_DB_SECRET_NAME}
    objectStore:
      secretName: ${FLOORIST_HMS_BUCKET_SECRET_NAME}
    suspend: ${{FLOORIST_SUSPEND}}
    logLevel: ${FLOORIST_LOGLEVEL}
    queries:
#      - prefix: hms_analytics/inventory/${ENV_NAME}/hosts
#        query: >-
#          SELECT
#            "id",
#            COALESCE("account", '0') AS "account",
#            "org_id" AS "org_id",
#            "created_on" AS "created_at",
#            "modified_on" AS "updated_at",
#            "reporter" AS "reporter",
#            "canonical_facts"->>'insights_id' AS "insights_id",
#            "canonical_facts"->>'subscription_manager_id' AS "subscription_manager_id",
#            "canonical_facts"->>'bios_uuid' AS "bios_uuid",
#            "canonical_facts"->>'provider_id' AS "provider_id",
#            "canonical_facts"->>'provider_type' AS "provider_type"
#          FROM "hbi"."hosts";
      - prefix: hms_analytics/inventory/${ENV_NAME}/groups
        chunksize: 10000
        query: >-
          SELECT
            "id",
            "org_id" AS "org_id",
            COALESCE("account", '0') AS "account",
            "name" AS "name",
            "created_on" AS "created_at",
            "modified_on" AS "updated_at"
          FROM "hbi"."groups"
      - prefix: hms_analytics/inventory/${ENV_NAME}/hosts_metrics/hosts_count
        query: >-
          SELECT COUNT(*) AS "hosts_count"
          FROM "hbi"."hosts";
      - prefix: hms_analytics/inventory/${ENV_NAME}/groups_metrics/groups_count
        query: >-
          SELECT COUNT(*) AS "group_counts"
          FROM "hbi"."groups";
      - prefix: hms_analytics/inventory/${ENV_NAME}/hosts_metrics/daily_created_by_reporters
        query: >-
          SELECT
            "reporter" AS "reporter",
            count(*) AS "hosts_created"
          FROM "hbi"."hosts"
          WHERE "created_on" >= NOW() - INTERVAL '1 day'
          GROUP BY "reporter";
      - prefix: hms_analytics/inventory/${ENV_NAME}/hosts_metrics/created_by_reporters
        query: >-
          SELECT
            "reporter" AS "reporter",
            count(*) AS "hosts_created"
          FROM "hbi"."hosts"
          WHERE "created_on" >= NOW() - INTERVAL '1 week'
          GROUP BY "reporter";
      - prefix: hms_analytics/inventory/${ENV_NAME}/hosts_metrics/daily_updated_by_reporters
        query: >-
          SELECT  "reporter" AS "reporter", count(*) AS "hosts_updated"
          FROM "hbi"."hosts"
          WHERE "modified_on" >= NOW() - INTERVAL '1 day'
          GROUP BY "reporter";
      - prefix: hms_analytics/inventory/${ENV_NAME}/hosts_metrics/updated_by_reporters
        query: >-
          SELECT  "reporter" AS "reporter", count(*) AS "hosts_updated"
          FROM "hbi"."hosts"
          WHERE "modified_on" >= NOW() - INTERVAL '1 week'
          GROUP BY "reporter";
      - prefix: hms_analytics/inventory/${ENV_NAME}/hosts_metrics/hosts_per_org_id
        chunksize: 10000
        query: >-
          SELECT
            "org_id" AS "org_id",
            COUNT(*) AS "host_count"
          FROM "hbi"."hosts"
          GROUP BY "org_id"
          ORDER BY "host_count" DESC;
      - prefix: hms_analytics/inventory/${ENV_NAME}/groups_metrics/org_ids_with_group_names
        chunksize: 10000
        query: >-
          SELECT
            DISTINCT "org_id" AS "org_id", "name" AS "name"
          FROM "hbi"."groups"
          ORDER BY "name" ASC;
      - prefix: hms_analytics/inventory/${ENV_NAME}/groups_metrics/hosts_per_groups
        chunksize: 10000
        query: >-
          SELECT
            "id" AS "group_id",
            "name" AS "group_name",
            COUNT(*) AS "host_count"
          FROM "hbi"."groups"
          JOIN "hbi"."hosts_groups" ON "groups"."id" = "hbi"."hosts_groups"."group_id"
          GROUP BY "groups"."id"
          ORDER BY "host_count" DESC;
- apiVersion: v1
  data:
    nginx.conf: |-
      worker_processes  1;
      error_log  /dev/stderr warn;
      pid        /run/nginx.pid;

      events {
        worker_connections  1024;
      }
      http {
        log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_proto" "$http_x_forwarded_for"';

        access_log  /dev/stdout  main;

        sendfile            on;
        tcp_nopush          on;
        tcp_nodelay         on;
        keepalive_timeout   65;
        server_tokens       off;

        upstream host-inventory-service-reads {
          server host-inventory-service-reads:8000;
          server host-inventory-service-secondary-reads:8000;
        }
        upstream host-inventory-service-writes {
          server host-inventory-service-writes:8000;
        }
        map $request_method $upstream_location {
                    GET     host-inventory-service-reads;
                    HEAD    host-inventory-service-reads;
                    POST    host-inventory-service-writes;
                    PUT     host-inventory-service-writes;
                    DELETE  host-inventory-service-writes;
                    default host-inventory-service-writes;
        }
        server {
          error_log  stderr;
          listen 8000;
          listen 9000;

          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_set_header X-Forwarded-Proto $http_x_forwarded_proto;
          proxy_set_header Host $http_host;
          proxy_redirect off;

          client_max_body_size 500M;
          client_header_buffer_size 46k;
          location /healthz {
              auth_basic          off;
              allow               all;
              return              200;
          }
          location /metrics {
              auth_basic          off;
              allow               all;
              return              200;
          }
          location / {
            proxy_pass http://$upstream_location;
            proxy_read_timeout 600s;
          }
        }
      }
  kind: ConfigMap
  metadata:
    name: inventory-nginx-conf

- apiVersion: v1
  kind: Secret
  metadata:
    name: rbac-psks
  data:
    psks.json: >-
      ewogICJhZHZpc29yIjogewogICAgImFsdC1zZWNyZXQiOiAiMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTEiCiAgfSwKICAiYXBwcm92YWwiOiB7CiAgICAiYWx0LXNlY3JldCI6ICIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMiIKICB9LAogICJub3RpZmljYXRpb25zIjogewogICAgImFsdC1zZWNyZXQiOiAiMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMiCiAgfSwKICAiaW52ZW50b3J5IjogewogICAgInNlY3JldCI6ICI0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQiCiAgfQp9
  type: Opaque

parameters:
- name: LOG_LEVEL
  value: INFO

- name: CPU_REQUEST_SERVICE
  value: 250m
- name: CPU_LIMIT_SERVICE
  value: 500m
- name: MEMORY_REQUEST_SERVICE
  value: 256Mi
- name: MEMORY_LIMIT_SERVICE
  value: 512Mi

- name: CPU_REQUEST_MQ_PMIN
  value: 250m
- name: CPU_LIMIT_MQ_PMIN
  value: 500m
- name: MEMORY_REQUEST_MQ_PMIN
  value: 256Mi
- name: MEMORY_LIMIT_MQ_PMIN
  value: 512Mi

- name: CPU_REQUEST_MQ_P1
  value: 250m
- name: CPU_LIMIT_MQ_P1
  value: 500m
- name: MEMORY_REQUEST_MQ_P1
  value: 256Mi
- name: MEMORY_LIMIT_MQ_P1
  value: 512Mi

- name: CPU_REQUEST_MQ_SP
  value: 250m
- name: CPU_LIMIT_MQ_SP
  value: 500m
- name: MEMORY_REQUEST_MQ_SP
  value: 256Mi
- name: MEMORY_LIMIT_MQ_SP
  value: 512Mi

- name: CPU_REQUEST_WORKSPACES_MQ
  value: 250m
- name: CPU_LIMIT_WORKSPACES_MQ
  value: 500m
- name: MEMORY_REQUEST_WORKSPACES_MQ
  value: 256Mi
- name: MEMORY_LIMIT_WORKSPACES_MQ
  value: 512Mi

- name: CPU_REQUEST_REAPER
  value: 250m
- name: CPU_LIMIT_REAPER
  value: 500m
- name: MEMORY_REQUEST_REAPER
  value: 256Mi
- name: MEMORY_LIMIT_REAPER
  value: 512Mi

- name: CPU_REQUEST_STALE_HOST_NOTIFICAION
  value: 250m
- name: CPU_LIMIT_STALE_HOST_NOTIFICAION
  value: 500m
- name: MEMORY_REQUEST_STALE_HOST_NOTIFICAION
  value: 256Mi
- name: MEMORY_LIMIT_STALE_HOST_NOTIFICAION
  value: 512Mi

- name: CPU_REQUEST_SP_VALIDATOR
  value: 250m
- name: CPU_LIMIT_SP_VALIDATOR
  value: 500m
- name: MEMORY_REQUEST_SP_VALIDATOR
  value: 256Mi
- name: MEMORY_LIMIT_SP_VALIDATOR
  value: 512Mi

- name: CPU_REQUEST_PENDO_SYNCHER
  value: 250m
- name: CPU_LIMIT_PENDO_SYNCHER
  value: 500m
- name: MEMORY_REQUEST_PENDO_SYNCHER
  value: 256Mi
- name: MEMORY_LIMIT_PENDO_SYNCHER
  value: 512Mi

- name: CPU_REQUEST_SYNCHRONIZER
  value: 250m
- name: CPU_LIMIT_SYNCHRONIZER
  value: 500m
- name: MEMORY_REQUEST_SYNCHRONIZER
  value: 256Mi
- name: MEMORY_LIMIT_SYNCHRONIZER
  value: 512Mi

- name: CPU_REQUEST_UNGROUPED_HOSTS_JOB
  value: 250m
- name: CPU_LIMIT_UNGROUPED_HOSTS_JOB
  value: 500m
- name: MEMORY_REQUEST_UNGROUPED_HOSTS_JOB
  value: 256Mi
- name: MEMORY_LIMIT_UNGROUPED_HOSTS_JOB
  value: 512Mi

- name: CPU_REQUEST_GROUPS_S3_EXPORT
  value: 250m
- name: CPU_LIMIT_GROUPS_S3_EXPORT
  value: 500m
- name: MEMORY_REQUEST_GROUPS_S3_EXPORT
  value: 256Mi
- name: MEMORY_LIMIT_GROUPS_S3_EXPORT
  value: 512Mi

- name: CPU_REQUEST_SYNDICATOR
  value: 250m
- name: CPU_LIMIT_SYNDICATOR
  value: 500m
- name: MEMORY_REQUEST_SYNDICATOR
  value: 256Mi
- name: MEMORY_LIMIT_SYNDICATOR
  value: 512Mi

- name: CPU_REQUEST_EXPORT_SVC
  value: 250m
- name: CPU_LIMIT_EXPORT_SVC
  value: 500m
- name: MEMORY_REQUEST_EXPORT_SVC
  value: 256Mi
- name: MEMORY_LIMIT_EXPORT_SVC
  value: 512Mi

- name: CPU_REQUEST_HOSTS_LAST_CHECK_IN
  value: 250m
- name: CPU_LIMIT_HOSTS_LAST_CHECK_IN
  value: 500m
- name: MEMORY_REQUEST_HOSTS_LAST_CHECK_IN
  value: 256Mi
- name: MEMORY_LIMIT_HOSTS_LAST_CHECK_IN
  value: 512Mi
- name: HOST_UPDATE_LIMIT
  value: "50000"

- name: CPU_REQUEST_EDGE_HOSTS_PRS
  value: 250m
- name: CPU_LIMIT_EDGE_HOSTS_PRS
  value: 500m
- name: MEMORY_REQUEST_EDGE_HOSTS_PRS
  value: 256Mi
- name: MEMORY_LIMIT_EDGE_HOSTS_PRS
  value: 512Mi

- description: Replica count for p1 consumer
  name: REPLICAS_P1
  value: "5"
- description: Replica count for pmin consumer
  name: REPLICAS_PMIN
  value: "3"
- description: Replica count for sp consumer
  name: REPLICAS_SP
  value: "2"
- description: Replica count for webservice
  name: REPLICAS_SVC_READS
  value: "7"
- description: Replica count for webservice
  name: REPLICAS_SVC_SECONDARY_READS
  value: "1"
- description: Replica count for webservice
  name: REPLICAS_SVC_WRITES
  value: "3"
- description: Replica count for export-service
  name: REPLICAS_EXPORT_SVC
  value: "2"
- description: Image tag
  name: IMAGE_TAG
  required: true
- description: Image NAME
  name: IMAGE
  required: true
  value: quay.io/cloudservices/insights-inventory
- description : ClowdEnvironment name
  name: ENV_NAME
  value: stage
- name: APP_NAME
  value: inventory
- description: ClowdApp name
  name: CLOWDAPP_NAME
  value: host-inventory
- description: Database name
  name: DB_NAME
  value: host-inventory
- name: PATH_PREFIX
  value: api
- name: CONSOLEDOT_HOSTNAME
  value: localhost
- name: URLLIB3_LOG_LEVEL
  value: WARNING
- description: SSL validation mode for the DB
  name: INVENTORY_DB_SSL_MODE
  value: prefer
- description: disable RBAC middleware
  name: BYPASS_RBAC
  value: 'false'
- description: disable account-to-org_id translation, defaulting to None where org_id is not provided
  name: BYPASS_TENANT_TRANSLATION
  value: 'false'
- name: KAFKA_PRODUCER_ACKS
  value: '1'
- name: KAFKA_PRODUCER_RETRIES
  value: '0'
- name: KAFKA_PRODUCER_RETRY_BACKOFF_MS
  value: '100'
- name: KAFKA_HOST_INGRESS_TOPIC
  description: The topic containing Host data sent by reporters
  value: platform.inventory.host-ingress
- name: NUMBER_OF_KAFKA_HOST_INGRESS_TOPIC_PARTITIONS
  description: Number of partitions for the Kafka host ingress topic
  value: '1'
- name: KAFKA_HOST_INGRESS_P1_TOPIC
  description: The TOP-PRIORITY topic containing Host data sent by reporters
  value: platform.inventory.host-ingress-p1
- name: NUMBER_OF_KAFKA_HOST_INGRESS_P1_TOPIC_PARTITIONS
  description: Number of partitions for the Kafka host ingress P1 topic
  value: '1'
- name: KAFKA_KESSEL_WORKSPACES_TOPIC
  description: The Kafka topic for Kessel Workspace data
  value: outbox.event.workspace
- name: NUMBER_OF_KAFKA_KESSEL_WORKSPACES_TOPIC_PARTITIONS
  description: Number of partitions for the Kafka kessel workspaces topic
  value: '1'
- name: KAFKA_EVENT_TOPIC
  description: The topic for Host data that were processed by Inventory
  value: platform.inventory.events
- name: NUMBER_OF_KAFKA_EVENT_TOPIC_PARTITIONS
  description: Number of partitions for the Kafka event topic
  value: '1'
- name: KAFKA_NOTIFICATION_TOPIC
  description: The topic containing messages to be sent as notifications
  value: platform.notifications.ingress
- name: NUMBER_OF_KAFKA_NOTIFICATION_TOPIC_PARTITIONS
  description: Number of partitions for the Kafka notification topic
  value: '1'
- name: KAFKA_ADDITIONAL_VALIDATION_TOPIC
  description: Used by system_profile_validator
  value: platform.inventory.host-ingress-p1
- name: KAFKA_SYSTEM_PROFILE_TOPIC
  description: The topic containing Host data for System Profile updates
  value: platform.inventory.system-profile
- name: NUMBER_OF_KAFKA_SYSTEM_PROFILE_TOPIC_PARTITIONS
  description: Number of partitions for the Kafka system-profile topic
  value: '1'
- name: PAYLOAD_TRACKER_KAFKA_TOPIC
  description: The topic for payload tracker
  value: platform.payload-status
- name: NUMBER_OF_PAYLOAD_TRACKER_KAFKA_TOPIC_PARTITIONS
  description: Number of partitions for the payload tracker topic.
  value: '1'
- name: KAFKA_EXPORT_SERVICE_TOPIC
  description: The topic used to consume Export Service data
  value: platform.export.requests
- name: NUMBER_OF_KAFKA_EXPORT_SERVICE_TOPIC_PARTITIONS
  description: Number of partitions for the export-service topic
  value: '1'
- name: KAFKA_HOST_INGRESS_GROUP
  description: The Kafka consumer group name
  value: inventory-mq
- name: KAFKA_SECURITY_PROTOCOL
  description: The Kafka Security Protocol
  value: PLAINTEXT
- name: KAFKA_SASL_MECHANISM
  value: 'PLAIN'
- name: CONSUMER_MQ_BROKER
  value: ''
- name: PROMETHEUS_PUSHGATEWAY
  value: 'localhost:9091'
- name: KAFKA_BOOTSTRAP_HOST
  value: 'localhost'
- name: KAFKA_BOOTSTRAP_PORT
  value: '29092'
- name: KESSEL_TARGET_URL
  value: 'localhost:20000'
- name: INVENTORY_DB_SSL_CERT
  value: ''
- name: PENDO_SYNCHER_SUSPEND
  value: 'true'
- name: PENDO_CRON_SCHEDULE
  value: '@daily'
- name: PENDO_SYNC_ACTIVE
  value: 'false'
- name: SP_VALIDATOR_SUSPEND
  value: 'true'
- name: REAPER_SUSPEND
  value: 'true'
- name: STALE_HOST_NOTIFICATION_SUSPEND
  value: 'true'
- name: STALE_HOST_NOTIFICATION_SCHEDULE
  value: '*/1 * * * *'
- name: SYNDICATOR_SUSPEND
  value: 'false'
- name: SYNDICATOR_CRON_SCHEDULE
  value: '*/5 * * * *'
- name: HOSTS_LAST_CHECK_IN_SCHEDULE
  value: '@hourly'
- name: HOSTS_LAST_CHECK_IN_SUSPEND
  value: 'false'
- name: EDGE_HOSTS_PRS_SCHEDULE
  value: '@hourly'
- name: EDGE_HOSTS_PRS_SUSPEND
  value: 'false'
- name: KAFKA_SP_VALIDATOR_MAX_MESSAGES
  value: '10000'
- name: TENANT_TRANSLATOR_HOST
  value: 'gateway.3scale-dev.svc.cluster.local'
- name: TENANT_TRANSLATOR_PORT
  value: '8892'
- name: GUNICORN_WORKERS
  value: '4'
- name: GUNICORN_THREADS
  value: '8'
- name: GUNICORN_REQUEST_FIELD_LIMIT
  value: '16380'
- name: GUNICORN_REQUEST_LINE_LIMIT
  value: '8190'
- name: SCRIPT_CHUNK_SIZE
  value: '500'
- name: REBUILD_EVENTS_TIME_LIMIT
  value: '3600'
- name: INVENTORY_DB_STATEMENT_TIMEOUT
  value: '30000'
- name: INVENTORY_DB_LOCK_TIMEOUT
  value: '30000'
- name: INVENTORY_API_CACHE_TIMEOUT_SECONDS
  value: '0'
- name: INVENTORY_API_CACHE_TYPE
  value: 'NullCache'
- name: MQ_DB_BATCH_MAX_MESSAGES
  value: '1'
- name: MQ_DB_BATCH_MAX_SECONDS
  value: '0.5'
- name: INVENTORY_API_USE_READREPLICA
  value: 'false'
- name: INVENTORY_API_READREPLICA_SECRET
  value: 'host-inventory-read-only-db'
- name: INVENTORY_API_SECONDARY_READREPLICA_SECRET
  value: 'host-inventory-read-only-db'
- name: INVENTORY_CACHE_INSIGHTS_CLIENT_SYSTEM_TIMEOUT_SEC
  value: '129600'
- name: INVENTORY_CACHE_THREAD_POOL_MAX_WORKERS
  value: '5'
- name: KAFKA_CONSUMER_SESSION_TIMEOUT_MS
  value: '10000'
- name: KAFKA_CONSUMER_HEARTBEAT_INTERVAL_MS
  value: '3000'
- name: INVENTORY_API_WRITES_LIVENESS_PROBE_PERIOD_SECONDS
  value: '30'
- name: INVENTORY_API_WRITES_LIVENESS_PROBE_TIMEOUT_SECONDS
  value: '60'
- name: INVENTORY_API_READS_LIVENESS_PROBE_PERIOD_SECONDS
  value: '30'
- name: INVENTORY_API_READS_LIVENESS_PROBE_TIMEOUT_SECONDS
  value: '60'
- name: INVENTORY_API_WRITES_READINESS_PROBE_PERIOD_SECONDS
  value: '30'
- name: INVENTORY_API_WRITES_READINESS_PROBE_TIMEOUT_SECONDS
  value: '60'
- name: INVENTORY_API_READS_READINESS_PROBE_PERIOD_SECONDS
  value: '30'
- name: INVENTORY_API_READS_READINESS_PROBE_TIMEOUT_SECONDS
  value: '60'
- name: INVENTORY_DB_SCHEMA
  value: 'hbi'
- name: S3_AWS_SECRET
  description: The AWS secret for S3
  value: 'hbi-kessel-s3'
- name: RBAC_V2_FORCE_ORG_ADMIN
  description: Whether to force User Identities to use is_org_admin=True for RBAC v2 calls
  value: 'false'

# NGINX
- displayName: Minimum replicas
  name: NGINX_REPLICAS
  required: true
  value: "1"
- displayName: Memory Request
  name: NGINX_MEMORY_REQUEST
  required: true
  value: 100Mi
- displayName: Memory Limit
  name: NGINX_MEMORY_LIMIT
  required: true
  value: 200Mi
- displayName: CPU Request
  name: NGINX_CPU_REQUEST
  required: true
  value: 100m
- displayName: CPU Limit
  name: NGINX_CPU_LIMIT
  required: true
  value: 200m

# Feature flags
- description: Unleash secret name
  name: UNLEASH_SECRET_NAME
  value: bypass
- description: Unleash API url
  name: UNLEASH_URL
- description: disable Unleash (feature flags), defaulting to fallback values
  name: BYPASS_UNLEASH
  value: 'false'
- description: How frequently the Unleash client refreshes data from the server (in seconds)
  name: UNLEASH_REFRESH_INTERVAL
  value: "15"

#floorist
- name: FLOORIST_SUSPEND
  description: Disable Floorist cronjob execution
  required: true
  value: 'true'
- description: bucket secret name
  name: FLOORIST_BUCKET_SECRET_NAME
  required: true
  value: dummy-secret
- description: bucket secret name
  name: FLOORIST_HMS_BUCKET_SECRET_NAME
  required: true
  value: dummy-hms-secret
- name: FLOORIST_LOGLEVEL
  description: Floorist loglevel config
  value: 'INFO'
- name: FLOORIST_DB_SECRET_NAME
  description: database secret name
  value: host-inventory-db
